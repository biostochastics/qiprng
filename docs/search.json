[{"path":[]},{"path":[]},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"security-enhancements","dir":"","previous_headings":"Version 0.6.0 (2025-09-06) > Critical Security & Stability Fixes","what":"Security Enhancements","title":"CHANGELOG","text":"BREAKING: Deterministic seeds crypto mixing now throw exceptions instead warnings Added bounds checking multiplication prevent overflow Validates sqrt_n <= sqrt(LLONG_MAX) squaring Discriminant Validation: Large discriminants exceeding LONG_MAX now use string conversion","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"thread-safety-overhaul","dir":"","previous_headings":"Version 0.6.0 (2025-09-06) > Critical Security & Stability Fixes","what":"Thread Safety Overhaul","title":"CHANGELOG","text":"Fixed race conditions multi_qi.cpp enhanced_prng.cpp Implemented lazy initialization proper synchronization Ensures consistent state visibility across threads Prevents data races index updates","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"error-handling-unification","dir":"","previous_headings":"Version 0.6.0 (2025-09-06) > Critical Security & Stability Fixes","what":"Error Handling Unification","title":"CHANGELOG","text":"CFE period overflow now throws std::runtime_error Non-square-free discriminants throw std::invalid_argument Removed warning suppression hide precision issues","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"numerical-stability","dir":"","previous_headings":"Version 0.6.0 (2025-09-06) > Critical Security & Stability Fixes","what":"Numerical Stability","title":"CHANGELOG","text":"Validates multiplication won’t overflow computing Checks addition overflow matrix operations Warns losing > 100 bits precision Throws error losing > 200 bits Tracks total precision loss diagnostics","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"code-quality","dir":"","previous_headings":"Version 0.6.0 (2025-09-06) > Critical Security & Stability Fixes","what":"Code Quality","title":"CHANGELOG","text":"Edge case coverage extreme discriminants Thread safety validation concurrent access Security enforcement verification Added Doxygen comments CFE computation Documented jump-ahead optimization strategy C++ code formatted clang-format (Google C++ Style) R code formatted styler (tidyverse style) Automatic formatting, linting, security checks Custom hooks R package-specific validations","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"files-modified","dir":"","previous_headings":"Version 0.6.0 (2025-09-06)","what":"Files Modified","title":"CHANGELOG","text":"src/quadratic_irrational.cpp: Overflow fixes, error handling src/enhanced_prng.cpp: Thread-safe initialization, security enforcement src/multi_qi.cpp: Cache coherency, fallback generator fixes src/precision_utils.hpp: Precision loss mitigation, added Rcpp include src/quadratic_irrational.hpp: Matrix overflow protection src/rcpp_exports.cpp: Security validation R/prng_interface.R: Fixed example comply security enforcement DESCRIPTION: Version bump 0.6.0 .pre-commit-config.yaml: Added pre-commit configuration README.md: Updated version release notes","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"security-enhancements---seed-generation","dir":"","previous_headings":"Version 0.5.5 (2025-09-01)","what":"Security Enhancements - Seed Generation","title":"CHANGELOG","text":"Critical: Replaced weak std::random_device libsodium’s randombytes_buf() cryptographically secure seed generation Input Validation: Added comprehensive bounds checking overflow protection rcpp_exports.cpp Warning System: Added clear warnings using deterministic seeds crypto mixing","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"code-quality--formatting","dir":"","previous_headings":"Version 0.5.5 (2025-09-01)","what":"Code Quality & Formatting","title":"CHANGELOG","text":"C++ Formatting: Implemented Google C++ Style Guide via clang-format Rcpp customizations R Formatting: Applied tidyverse style guide using styler package Build System: Added Makefile.format unified formatting workflow Configuration Files: Created .clang-format, .clang-format-ignore, .Rprofile consistent code style","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"bug-fixes","dir":"","previous_headings":"Version 0.5.5 (2025-09-01)","what":"Bug Fixes","title":"CHANGELOG","text":"Fixed syntax errors R test files (basic_verify.R, final_verify.R, verify_thread_safety.R) Removed macOS resource fork files test directory","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"testing","dir":"","previous_headings":"Version 0.5.5 (2025-09-01)","what":"Testing","title":"CHANGELOG","text":"Verified package builds installs correctly security fixes Confirmed libsodium initialization secure random generation working formatted code passes compilation runtime tests","code":""},{"path":[]},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"tls-cleanup-race-conditions","dir":"","previous_headings":"Version 0.5.4 (2025-08-29) > Critical Thread Safety Fixes","what":"TLS Cleanup Race Conditions","title":"CHANGELOG","text":"Issue: Thread-local storage cleanup raced destructor execution causing crashes Fix: Implemented std::call_once synchronization atomic memory ordering Files: ziggurat_normal.cpp, ziggurat_normal.hpp Impact: Eliminated thread termination crashes use--free errors","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"key-improvements","dir":"","previous_headings":"Version 0.5.4 (2025-08-29) > Critical Thread Safety Fixes","what":"Key Improvements","title":"CHANGELOG","text":"Proper Synchronization: Replaced double-checked locking antipattern std::call_once Recursive Cleanup Prevention: Added thread-local atomic flags RAII guards Memory Ordering: Applied acquire/release fences cross-thread visibility Static Member Fix: Resolved duplicate symbol linker errors precision_utils.hpp Cache Alignment: Fixed macro naming conflicts (QIPRNG_CACHE_LINE_SIZE)","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"validation","dir":"","previous_headings":"Version 0.5.4 (2025-08-29)","what":"Validation","title":"CHANGELOG","text":"parallel generation tests pass without crashes Thread exit scenarios handled safely Concurrent stress tests show race conditions Zero performance regression enhanced safety","code":""},{"path":[]},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"strict-aliasing-compliance","dir":"","previous_headings":"Version 0.5.3 (2025-08-29) > Medium Severity Security & Performance Fixes","what":"Strict Aliasing Compliance","title":"CHANGELOG","text":"Issue: Type punning via memcpy double/uint64_t violated C++ strict aliasing rules Fix: Implemented safe_bit_cast template using std::bit_cast (C++20) union fallback (C++17) Files: bit_operations.hpp (new), simd_operations.hpp Impact: Eliminated undefined behavior -O2/-O3 optimization","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"threadpool-resource-management","dir":"","previous_headings":"Version 0.5.3 (2025-08-29) > Medium Severity Security & Performance Fixes","what":"ThreadPool Resource Management","title":"CHANGELOG","text":"Issue: Missing timeout mechanism caused potential deadlocks shutdown Fix: Added shutdown() method configurable timeout (default 5 seconds) Files: thread_pool.hpp Impact: Guaranteed termination automatic thread detachment timeout","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"mpfr-memory-optimization","dir":"","previous_headings":"Version 0.5.3 (2025-08-29) > Medium Severity Security & Performance Fixes","what":"MPFR Memory Optimization","title":"CHANGELOG","text":"Issue: QI instance maintained separate MPFR contexts (~256 bytes ) Fix: Implemented thread-local context pooling automatic cleanup Files: mpfr_pool.hpp (new) Impact: 90% memory reduction, zero contention, 60-second idle cleanup","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"cache-line-optimization","dir":"","previous_headings":"Version 0.5.3 (2025-08-29) > Medium Severity Security & Performance Fixes","what":"Cache Line Optimization","title":"CHANGELOG","text":"Issue: Adjacent atomic variables caused false sharing cache thrashing Fix: Added CacheAlignedAtomic template 64/128-byte alignment Files: cache_aligned.hpp (new), thread_pool.hpp, work_stealing_queue.hpp Impact: 2-3x performance improvement concurrent operations","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"testing--validation","dir":"","previous_headings":"Version 0.5.3 (2025-08-29)","what":"Testing & Validation","title":"CHANGELOG","text":"fixes validated test_medium_fixes.cpp Zero breaking changes - full backward compatibility maintained Compiler support: GCC 7+, Clang 6+, MSVC 2017+ (C++17 minimum)","code":""},{"path":[]},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"precision-loss-mitigation","dir":"","previous_headings":"Version 0.5.2 (2025-08-29) > Algorithmic Accuracy Improvements","what":"Precision Loss Mitigation","title":"CHANGELOG","text":"Issue: Direct MPFR→double conversions lost ~203 bits precision (256→53 bits) Fix: Implemented extended precision intermediates using long double gradual reduction Impact: Preserves significant digits 256→80→53 bit conversion path","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"mathematical-constants-precision","dir":"","previous_headings":"Version 0.5.2 (2025-08-29) > Algorithmic Accuracy Improvements","what":"Mathematical Constants Precision","title":"CHANGELOG","text":"Issue: Hardcoded M_PI limited 20 decimal places vs MPFR’s 256-bit capability Fix: Replaced M_PI definitions MPFR’s mpfr_const_pi() full precision Impact: Mathematical operations now use constants accurate ~77 decimal digits","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"precision-infrastructure","dir":"","previous_headings":"Version 0.5.2 (2025-08-29) > Algorithmic Accuracy Improvements","what":"Precision Infrastructure","title":"CHANGELOG","text":"New Module: precision_utils.hpp centralizes precision-related functionality safe_mpfr_to_double(): Extended precision conversion tracking PrecisionConstants: Thread-safe high-precision mathematical constants Precision loss metrics monitoring conversion quality Support __float128 compatible systems (113-bit mantissa)","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"technical-details","dir":"","previous_headings":"Version 0.5.2 (2025-08-29)","what":"Technical Details","title":"CHANGELOG","text":"Conversion Path: MPFR(256-bit) → long double(80-bit) → double(53-bit) Performance: ~10-15% overhead extended precision (acceptable accuracy gain) Compatibility: Automatic fallback direct conversion non-x86 architectures","code":""},{"path":[]},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"statistical-uniformity-restoration","dir":"","previous_headings":"Version 0.5.1 (2025-08-29) > Critical Security Fixes","what":"Statistical Uniformity Restoration","title":"CHANGELOG","text":"Issue: Hardcoded 0.5 fallback created detectable patterns, breaking cryptographic security Fix: Implemented thread-local fallback PRNG using std::mt19937_64 hardware entropy seed Impact: Chi-square test p-value improved < 0.001 0.956 (perfect uniformity)","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"numeric-overflow-protection","dir":"","previous_headings":"Version 0.5.1 (2025-08-29) > Critical Security Fixes","what":"Numeric Overflow Protection","title":"CHANGELOG","text":"Issue: P_next * P_next overflow long long safety check Fix: Added 128-bit arithmetic (__int128) fallback pre-multiplication validation Impact: Successfully handles discriminants 2^30 without crashes","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"thread-safety-violations","dir":"","previous_headings":"Version 0.5.1 (2025-08-29) > Critical Security Fixes","what":"Thread Safety Violations","title":"CHANGELOG","text":"Issue: const_cast<std::mutex&> caused undefined behavior concurrent access Fix: Made mutex mutable proper const-correctness Impact: Eliminated data races detected ThreadSanitizer","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"lock-contention-elimination","dir":"","previous_headings":"Version 0.5.1 (2025-08-29) > Performance Optimizations","what":"Lock Contention Elimination","title":"CHANGELOG","text":"Issue: Global mutex every next() call created serialization bottleneck Fix: Thread-local caching 256-value batches Lock acquisitions reduced 256x Throughput: 8.18 million values/second (single-threaded) Near-linear scaling thread count","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"algorithm-robustness","dir":"","previous_headings":"Version 0.5.1 (2025-08-29) > Performance Optimizations","what":"Algorithm Robustness","title":"CHANGELOG","text":"Issue: Fixed MAX_PERIOD=100000 insufficient large discriminants Fix: Dynamic scaling: max(100000, 10 * sqrt(discriminant)) Impact: Correct handling periods √D complexity","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"testing--validation---fix-verification","dir":"","previous_headings":"Version 0.5.1 (2025-08-29)","what":"Testing & Validation - Fix Verification","title":"CHANGELOG","text":"fixes validated comprehensive test suite Statistical tests: Chi-square (p=0.956), Kolmogorov-Smirnov, Anderson-Darling Stress testing: 100M values generated without errors Thread safety: Validated ThreadSanitizer Helgrind","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"major-enhancements","dir":"","previous_headings":"Version 0.5.0 (2025-08-28)","what":"Major Enhancements","title":"CHANGELOG","text":"Hardware Acceleration: SIMD vectorization AVX2/NEON support Parallel Generation: OpenMP parallelization work-stealing queue Advanced Mixing Strategies: XOR, averaging, modular, cascade mixing enhanced entropy Matrix Jump-Ahead: O(log n) complexity using matrix exponentiation MPFR precision Extended Distributions: Added Levy stable, Pareto, Cauchy, multivariate normal, Gaussian copula Apple Silicon Optimization: Native ARM64 NEON acceleration","code":""},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"performance-improvements","dir":"","previous_headings":"Version 0.5.0 (2025-08-28)","what":"Performance Improvements","title":"CHANGELOG","text":"4-8x speedup SIMD operations Parallel generation scales linearly CPU cores Optimized memory allocation object pooling Cache-aligned data structures reduced false sharing","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"security--thread-safety","dir":"","previous_headings":"Version 0.4.1 (2025-08-27)","what":"Security & Thread Safety","title":"CHANGELOG","text":"Critical thread safety fixes concurrent access Enhanced mutex protection global state Improved error handling recovery mechanisms","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"core-features","dir":"","previous_headings":"Version 0.4.0 (2025-08-26)","what":"Core Features","title":"CHANGELOG","text":"Initial release quadratic irrational PRNG implementation MPFR high-precision arithmetic (24-10000 bits) 14+ statistical distributions ChaCha20 cryptographic mixing Comprehensive test suite 70+ statistical tests 370 validated discriminants","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"beta-release","dir":"","previous_headings":"Version 0.3.0 (2025-08-25)","what":"Beta Release","title":"CHANGELOG","text":"Basic quadratic irrational implementation Uniform normal distributions Initial test framework","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"alpha-release","dir":"","previous_headings":"Version 0.2.0 (2025-08-24)","what":"Alpha Release","title":"CHANGELOG","text":"Proof concept implementation Basic MPFR integration Limited distribution support","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/CHANGELOG.html","id":"initial-development","dir":"","previous_headings":"Version 0.1.0 (2025-08-23)","what":"Initial Development","title":"CHANGELOG","text":"Project structure setup R package skeleton Basic C++ integration","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"qiprng v0.5.0 Package Status Report","text":"qiprng package version 0.5.0 successfully updated significant enhancements critical issues resolved.","code":""},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"version-information","dir":"","previous_headings":"","what":"Version Information","title":"qiprng v0.5.0 Package Status Report","text":"Current Version: 0.5.0 Previous Version: 0.4.1 Package Built: qiprng_0.5.0.tar.gz (149.4 MB)","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"id_1-white_check_mark-hardware-acceleration","dir":"","previous_headings":"Major Changes and Enhancements","what":"1. ✅ Hardware Acceleration","title":"qiprng v0.5.0 Package Status Report","text":"SIMD Vectorization: Implemented AVX2, AVX512, ARM NEON Apple Silicon Optimization: Native ARM64 support NEON acceleration OpenMP Parallelization: Multi-core parallel generation support","code":""},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"id_2-white_check_mark-advanced-mixing-strategies","dir":"","previous_headings":"Major Changes and Enhancements","what":"2. ✅ Advanced Mixing Strategies","title":"qiprng v0.5.0 Package Status Report","text":"Round Robin: Sequential cycling (default, fastest) XOR Mixing: Bitwise XOR maximum entropy Averaging: Weighted average smooth distribution Modular Addition: Sum modulo 1 entropy combining Cascade Mixing: Three-pass mixing maximum security","code":""},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"id_3-white_check_mark-parallel-generation-framework","dir":"","previous_headings":"Major Changes and Enhancements","what":"3. ✅ Parallel Generation Framework","title":"qiprng v0.5.0 Package Status Report","text":"Work-Stealing Queue: Dynamic load balancing across threads Thread-Safe Buffers: Lock-free memory management Configurable Threading: Automatic thread count optimization","code":""},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"id_4-white_check_mark-matrix-jump-ahead","dir":"","previous_headings":"Major Changes and Enhancements","what":"4. ✅ Matrix Jump-Ahead","title":"qiprng v0.5.0 Package Status Report","text":"O(log n) Complexity: Binary exponentiation MPFR Independent Streams: Efficient parallel stream generation Astronomical Jumps: Support jumps 10^18 steps","code":""},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"id_5-white_check_mark-extended-distributions","dir":"","previous_headings":"Major Changes and Enhancements","what":"5. ✅ Extended Distributions","title":"qiprng v0.5.0 Package Status Report","text":"Levy Stable: Heavy-tailed distribution support Pareto: Power law distributions Cauchy: Fat-tailed distributions Multivariate Normal: Gaussian copula","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"critical-bug-fixes","dir":"","previous_headings":"Issues Fixed","what":"Critical Bug Fixes","title":"qiprng v0.5.0 Package Status Report","text":"✅ XOR Mixing Hang: Fixed missing exception handling fill_thread_safe() ✅ Single QI Mixing: Added self-mixing single generator scenarios ✅ Work-Stealing Deadlock: Added idle counter prevent infinite loops ✅ Enum Mismatch: Fixed MixingStrategy enum references","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"core-implementation-files","dir":"","previous_headings":"File Structure","what":"Core Implementation Files","title":"qiprng v0.5.0 Package Status Report","text":"src/enhanced_prng.cpp - Main PRNG implementation v0.5.0 enhancements src/multi_qi.cpp - Multi-QI ensemble mixing strategies (fixed) src/simd_operations.hpp - SIMD vectorization implementation src/parallel_jump_ahead.hpp - Matrix jump-ahead algorithms src/work_stealing_queue.hpp - Work-stealing parallelization src/extended_distributions.hpp - New distribution implementations src/hardware_acceleration.hpp - Hardware detection optimization","code":""},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"documentation","dir":"","previous_headings":"File Structure","what":"Documentation","title":"qiprng v0.5.0 Package Status Report","text":"README.md - Updated v0.5.0 features benchmarks MATH.md - Enhanced new algorithms theory docs/v0.5.0_features.md - Comprehensive feature documentation","code":""},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"tests","dir":"","previous_headings":"File Structure","what":"Tests","title":"qiprng v0.5.0 Package Status Report","text":"tests/testthat/test-v0_5_0_features.R - Comprehensive feature tests tests/test_comprehensive_v050.R - Full validation suite tests/statistical_validation.R - Statistical quality tests tests/quick_validation.R - Quick smoke tests","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"test-coverage","dir":"","previous_headings":"Testing Status","what":"Test Coverage","title":"qiprng v0.5.0 Package Status Report","text":"✅ mixing strategies tested working ✅ Parallel generation validated ✅ Jump-ahead functionality verified ✅ SIMD operations functional Apple Silicon ✅ Thread safety confirmed ✅ Deterministic mode working ✅ distributions tested","code":""},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"statistical-quality","dir":"","previous_headings":"Testing Status","what":"Statistical Quality","title":"qiprng v0.5.0 Package Status Report","text":"Kolmogorov-Smirnov uniformity tests passing Chi-squared goodness fit validated Serial correlation within acceptable bounds mixing strategies produce valid distributions","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"apple-silicon-m1m2m3","dir":"","previous_headings":"Platform Support","what":"Apple Silicon (M1/M2/M3)","title":"qiprng v0.5.0 Package Status Report","text":"✅ ARM64 native compilation ✅ NEON SIMD acceleration ✅ Optimized buffer sizes unified memory ✅ Performance: ~300K-500K values/sec","code":""},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"intelamd-x86_64","dir":"","previous_headings":"Platform Support","what":"Intel/AMD x86_64","title":"qiprng v0.5.0 Package Status Report","text":"✅ AVX2/AVX512 support ✅ OpenMP parallelization ✅ Large cache optimization","code":""},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"known-issues","dir":"","previous_headings":"","what":"Known Issues","title":"qiprng v0.5.0 Package Status Report","text":"None critical Warning messages MPFR inexact operations normal expected","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"for-production-use","dir":"","previous_headings":"Recommendations","what":"For Production Use","title":"qiprng v0.5.0 Package Status Report","text":"","code":"config <- list(   mixing_strategy = \"xor_mix\",     # Best entropy   use_parallel_filling = TRUE,     # Enable parallelization   buffer_size = 100000,            # Large buffer for efficiency   use_excellent_only = TRUE        # Use validated discriminants )"},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"for-research","dir":"","previous_headings":"Recommendations","what":"For Research","title":"qiprng v0.5.0 Package Status Report","text":"","code":"config <- list(   mixing_strategy = \"cascade_mix\",  # Maximum randomness   mpfr_precision = 256,             # Higher precision   use_crypto_mixing = TRUE          # Cryptographic security )"},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"package-validation","dir":"","previous_headings":"","what":"Package Validation","title":"qiprng v0.5.0 Package Status Report","text":"R CMD build: ✅ Successful R CMD check: ⚠️ Minor warning testthat namespace (non-critical) Installation: ✅ Successful Loading: ✅ Successful libsodium initialization","code":""},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"conclusion","dir":"","previous_headings":"","what":"Conclusion","title":"qiprng v0.5.0 Package Status Report","text":"qiprng v0.5.0 package fully functional planned enhancements implemented tested. package provides state---art pseudo-random number generation hardware acceleration, parallel processing, advanced mixing strategies. critical issues resolved, package ready production use.","code":""},{"path":"https://biostochastics.github.io/qiprng/PACKAGE_STATUS.html","id":"next-steps","dir":"","previous_headings":"","what":"Next Steps","title":"qiprng v0.5.0 Package Status Report","text":"Consider adding GPU acceleration (CUDA/Metal) Implement distributed generation (MPI) Add quantum-inspired mixing strategies Optimize specific scientific computing workflows Report generated: August 9, 2025 Package maintainer: Sergey Kornilov sergey.kornilov@biostochastics.com","code":""},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"technical-documentation-for-the-quadratic-irrational-prng","dir":"Articles","previous_headings":"","what":"Technical Documentation for the Quadratic Irrational PRNG","title":"Mathematical Foundation of QIPRNG","text":"Attribution: mathematical foundation core algorithm design presented document based work Vincent Granville (2022), specifically research military-grade random number generators using quadratic irrationals. Granville provided original Python implementation, document describes R/C++ implementation developed qiprng package. Reference: Granville, V. (2022). Military Grade Fast Random Number Generator Based Quadratic Irrationals. Available : https://mltechniques.com/2022/12/13/military-grade-fast-random-number-generator-based--quadratic-irrationals/","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"basic-principle","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > Mathematical Foundation: The Quadratic Map","what":"Basic Principle","title":"Mathematical Foundation of QIPRNG","text":"core algorithm based quadratic recurrence relation form: xn+1=(⋅xn2+b⋅xn+c)mod⁡1x_{n+1} = (\\cdot x_n^2 + b \\cdot x_n + c) \\bmod 1 : - xnx_n current state (value [0,1]) - aa, bb, cc integer parameters - mod⁡1\\bmod 1 means take fractional part result discrete dynamical system derived theory quadratic irrationals. properly configured, map exhibits chaotic behavior, making suitable random number generation.","code":""},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"the-discriminant-requirement","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > Mathematical Foundation: The Quadratic Map","what":"The Discriminant Requirement","title":"Mathematical Foundation of QIPRNG","text":"discriminant quadratic equation defined : Δ=b2−4ac\\Delta = b^2 - 4ac discriminant must positive: Mathematical reasons: positive discriminant ensures quadratic equation ax2+bx+c=0ax^2 + bx + c = 0 two distinct real roots. essential : Δ>0\\Delta > 0, quadratic map two fixed points real domain fixed points create bounded region chaotic behavior occurs sequence “bounce” unpredictably boundaries Randomness quality: discriminant positive, sequence exhibits sensitive dependence initial conditions (“butterfly effect”), hallmark chaotic systems produces high-quality randomness. Sequence behavior: Negative discriminant: sequence converge predictable pattern Zero discriminant: sequence gravitate toward single fixed point positive discriminant creates necessary “stretching folding” dynamic chaos","code":""},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"orbit-structure","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > Mathematical Foundation: The Quadratic Map","what":"Orbit Structure","title":"Mathematical Foundation of QIPRNG","text":"sequence generated recurrence relation creates mathematicians call “orbit” dynamical systems theory. proper parameters, orbit: Densely fills interval [0,1] Never repeats exactly (sufficient precision) uniform distribution points Exhibits exponential divergence nearby starting values","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"parameter-a","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > Parameter Constraints and Their Reasoning","what":"Parameter a","title":"Mathematical Foundation of QIPRNG","text":"Constraint: >0a > 0 (must positive) Reasoning: - Controls “stretching” factor map - negative, invert parabola destroy chaotic properties - zero, degenerate linear map poor randomness - Typical values: 1-10 balanced chaos vs stability","code":""},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"parameter-b","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > Parameter Constraints and Their Reasoning","what":"Parameter b","title":"Mathematical Foundation of QIPRNG","text":"Constraint: strict mathematical restriction, typically |b|<20|b| < 20 Reasoning: - Acts “linear mixing” term - large values can dominate quadratic term, reducing nonlinearity - Negative values allowed can enhance mixing - Often chosen make discriminant square-free","code":""},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"parameter-c","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > Parameter Constraints and Their Reasoning","what":"Parameter c","title":"Mathematical Foundation of QIPRNG","text":"Constraint: Often negative ensure positive discriminant Reasoning: - “translation” parameter shifts map - >0a > 0 b2>0b^2 > 0, negative cc helps ensure Δ=b2−4ac>0\\Delta = b^2 - 4ac > 0 - Controls location fixed points - Affects density orbit","code":""},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"square-free-discriminant","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > Parameter Constraints and Their Reasoning","what":"Square-Free Discriminant","title":"Mathematical Foundation of QIPRNG","text":"discriminant ideally square-free (divisible perfect square except 1). Mathematical justification: Quadratic irrationals square-free discriminants maximal period length continued fraction expansions, translates : - Maximum complexity generated sequence - Optimal distribution properties - Resistance linear predictability","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"matrix-jump-ahead-with-olog-n-complexity","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > Implementation Enhancements","what":"Matrix Jump-Ahead with O(log n) Complexity","title":"Mathematical Foundation of QIPRNG","text":"v0.6.0 implementation includes optimized jump-ahead algorithm using matrix exponentiation: [xn+1xn1]=[abc100001][xn2xn1]\\begin{bmatrix} x_{n+1} \\\\ x_n \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} & b & c \\\\ 1 & 0 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix} \\begin{bmatrix} x_n^2 \\\\ x_n \\\\ 1 \\end{bmatrix} Using binary exponentiation, can compute MnM^n O(log⁡n)O(\\log n) operations, enabling efficient parallel stream generation.","code":""},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"advanced-mixing-strategies","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > Implementation Enhancements","what":"Advanced Mixing Strategies","title":"Mathematical Foundation of QIPRNG","text":"Five mixing strategies combine outputs multiple QI generators: Round Robin: Sequential cycling generators XOR Mixing: Bitwise XOR mantissas maximum entropy Averaging: Weighted average smooth distribution Modular Addition: Sum modulo 1 entropy combining Cascade Mixing: Three-pass mixing (XOR → modular → nonlinear)","code":""},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"simd-vectorization","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > Implementation Enhancements","what":"SIMD Vectorization","title":"Mathematical Foundation of QIPRNG","text":"Hardware-optimized operations using: - AVX2/AVX512: 4-8 doubles per operation x86 - ARM NEON: 2 doubles per operation Apple Silicon - Automatic fallback: Scalar operations SIMD unavailable","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"precision-levels","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > High-Precision Arithmetic with MPFR","what":"Precision Levels","title":"Mathematical Foundation of QIPRNG","text":"implementation supports precision 24 10,000 bits: - 53 bits: Standard double precision (default) - 113 bits: Quadruple precision critical applications - 256 bits: High precision cryptographic applications - 1000+ bits: Research theoretical validation","code":""},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"precision-loss-mitigation","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > High-Precision Arithmetic with MPFR","what":"Precision Loss Mitigation","title":"Mathematical Foundation of QIPRNG","text":"conversion MPFR double uses extended precision intermediates: gradual reduction preserves significant digits direct conversion.","code":"MPFR(256-bit) → long double(80-bit) → double(53-bit)"},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"chacha20-integration","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > Cryptographic Security Layer","what":"ChaCha20 Integration","title":"Mathematical Foundation of QIPRNG","text":"generator incorporates ChaCha20 cipher cryptographic mixing: - 256-bit key derived hardware entropy - Per-thread nonce generation - Periodic reseeding system entropy pool","code":""},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"security-guarantees","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > Cryptographic Security Layer","what":"Security Guarantees","title":"Mathematical Foundation of QIPRNG","text":"Forward secrecy: Past outputs reconstructed Backward secrecy: Future outputs predicted Side-channel resistance: Constant-time operations possible","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"validation-suite","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > Statistical Properties and Testing","what":"Validation Suite","title":"Mathematical Foundation of QIPRNG","text":"implementation validated : - NIST Statistical Test Suite: 15 tests cryptographic randomness - Dieharder: 114 tests GSL library - TestU01: Crush, BigCrush, Rabbit batteries - Custom tests: Autocorrelation, spectral analysis, entropy measures","code":""},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"discriminant-quality","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > Statistical Properties and Testing","what":"Discriminant Quality","title":"Mathematical Foundation of QIPRNG","text":"750 possible discriminants tested: - 370 rated “Excellent” (49.3% total) - default configuration - 213 rated “Good” (28.4%) - 167 rated “Fair” (22.3%)","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"generation-speed","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > Performance Characteristics","what":"Generation Speed","title":"Mathematical Foundation of QIPRNG","text":"Single-threaded performance: - 8.18 million values/second modern x86-64 - Sub-122ns latency per value - O(1) memory usage thread-local caching","code":""},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"parallel-scaling","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > Performance Characteristics","what":"Parallel Scaling","title":"Mathematical Foundation of QIPRNG","text":"Multi-threaded performance OpenMP: - Near-linear scaling physical core count - Work-stealing queue load balancing - Lock-free buffer management","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"connection-to-continued-fractions","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > Theoretical Background","what":"Connection to Continued Fractions","title":"Mathematical Foundation of QIPRNG","text":"quadratic irrational Δ\\sqrt{\\Delta} periodic continued fraction expansion: $$\\sqrt{\\Delta} = a_0 + \\cfrac{1}{a_1 + \\cfrac{1}{a_2 + \\cfrac{1}{\\ddots}}}$$ period length expansion directly relates complexity PRNG sequence.","code":""},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"ergodic-theory","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > Theoretical Background","what":"Ergodic Theory","title":"Mathematical Foundation of QIPRNG","text":"quadratic map satisfies conditions ergodicity: - Measure preservation: Lebesgue measure preserved - Mixing property: Correlation states decays exponentially - Transitivity: orbit dense state space","code":""},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"information-theoretic-entropy","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG > Theoretical Background","what":"Information-Theoretic Entropy","title":"Mathematical Foundation of QIPRNG","text":"theoretical entropy rate approaches maximum: H=−∑ipilog⁡2pi≈1 bit per bitH = -\\sum_{} p_i \\log_2 p_i \\approx 1 \\text{ bit per bit} indicates optimal unpredictability binary representation.","code":""},{"path":"https://biostochastics.github.io/qiprng/articles/mathematical_foundation.html","id":"references","dir":"Articles","previous_headings":"Technical Documentation for the Quadratic Irrational PRNG","what":"References","title":"Mathematical Foundation of QIPRNG","text":"Granville, V. (2022). “Military Grade Fast Random Number Generator Based Quadratic Irrationals”. Machine Learning Techniques. Khintchine, . Y. (1964). “Continued Fractions”. University Chicago Press. Arnold, V. . (1989). “Mathematical Methods Classical Mechanics”. Springer-Verlag. Knuth, D. E. (1997). “Art Computer Programming, Volume 2: Seminumerical Algorithms”. Addison-Wesley. L’Ecuyer, P. (1999). “Good Parameters Implementations Combined Multiple Recursive Random Number Generators”. Operations Research. Marsaglia, G. (2003). “Xorshift RNGs”. Journal Statistical Software. Bernstein, D. J. (2008). “ChaCha, variant Salsa20”. Workshop Record SASC.","code":""},{"path":"https://biostochastics.github.io/qiprng/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sergey Kornilov. Author, maintainer.","code":""},{"path":"https://biostochastics.github.io/qiprng/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kornilov S (2025). qiprng: Quadratic Irrational PRNG. R package version 0.6.0.","code":"@Manual{,   title = {qiprng: Quadratic Irrational PRNG},   author = {Sergey Kornilov},   year = {2025},   note = {R package version 0.6.0}, }"},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"qiprng package implements pseudo-random number generator based quadratic irrational numbers hardware acceleration parallel generation capabilities. provides cryptographic security features extensive statistical distribution support.","code":"library(qiprng) createPRNG() x <- generatePRNG(10000) hist(x, breaks = 50, main = \"qiprng uniform distribution\", col = \"skyblue\")"},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"whats-new-in-v060","dir":"","previous_headings":"","what":"What’s New in v0.6.0","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"release addresses critical security vulnerabilities thread safety issues. Key improvements include integer overflow protection discriminant validation, mandatory exception throwing deterministic seeds cryptographic mixing, comprehensive thread safety fixes using std::once_flag memory barriers. error handling unified use exceptions consistently instead warnings, ensuring failures properly propagated. Numerical stability enhanced matrix overflow protection precision loss mitigation MPFR conversions. code formatted standards pre-commit hooks configured ongoing code quality. complete version history migration guides, see CHANGELOG.md.","code":""},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"package offers high-precision computation using MPFR library configurable precision 24 10,000 bits, supporting 14 statistical distributions including standard continuous discrete distributions well extended distributions like Levy stable, Pareto, multivariate normal. Hardware acceleration provided SIMD vectorization AVX2/NEON support OpenMP parallelization work-stealing queues optimal load balancing. cryptographic security layer uses ChaCha20 cipher mixing multiple strategies including XOR, averaging, modular, cascade mixing enhanced entropy. Thread safety guaranteed proper synchronization primitives thread-local resources, deterministic mode seed support enables reproducible sequences research testing. implementation validated 70 statistical tests uses 370 discriminants rated excellent comprehensive testing.","code":""},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"detailed installation instructions platform, see Installation section .","code":"# Install from GitHub remotes::install_github(\"biostochastics/qiprng\")  # Generate random numbers library(qiprng) createPRNG() random_values <- generatePRNG(1000)"},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"implementation based Vincent Granville’s work random number generators using quadratic irrationals. mathematical foundation core algorithm design follow Granville’s approach. Reference: Granville, V. (2022). Military Grade Fast Random Number Generator Based Quadratic Irrationals","code":""},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"performance--quality","dir":"","previous_headings":"","what":"Performance & Quality","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"generator achieves 8.18 million values per second single-threaded mode near-linear scaling multi-threaded configurations. Memory usage remains constant O(1) thread-local caching, delivering sub-122ns latency per value. 750 possible discriminants validated comprehensive testing one million samples . package defaults using 370 discriminants rated “Excellent” (49.3% total), ensuring optimal statistical properties. research purposes, discriminants can enabled configuration options.","code":""},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"package contains C++ code requires compiler several system libraries installed system R package can built.","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"macos","dir":"","previous_headings":"Installation > Prerequisites","what":"macOS","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"need install Command Line Tools Xcode required libraries using Homebrew. Install Xcode Command Line Tools: Install Homebrew (don’t ): Install required libraries:","code":"xcode-select --install /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" brew install pkg-config gmp mpfr libsodium openssl"},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"linux-debianubuntu","dir":"","previous_headings":"Installation > Prerequisites","what":"Linux (Debian/Ubuntu)","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"Use apt-get install required development libraries:","code":"sudo apt-get update sudo apt-get install build-essential libmpfr-dev libgmp-dev libsodium-dev libssl-dev"},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"linux-fedoracentosrhel","dir":"","previous_headings":"Installation > Prerequisites","what":"Linux (Fedora/CentOS/RHEL)","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"Use yum dnf install required development libraries:","code":"sudo dnf groupinstall \"Development Tools\" sudo dnf install gmp-devel mpfr-devel libsodium-devel openssl-devel"},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"windows","dir":"","previous_headings":"Installation > Prerequisites","what":"Windows","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"Windows, required libraries downloaded automatically installation, need Rtools installed configured correctly.","code":""},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"install-the-package","dir":"","previous_headings":"Installation","what":"Install the Package","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"prerequisites installed, can install qiprng GitHub using remotes package R:","code":"if (!require(\"remotes\")) {   install.packages(\"remotes\") } remotes::install_github(\"biostochastics/qiprng\")"},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"standard-distributions","dir":"","previous_headings":"Supported Distributions","what":"Standard Distributions","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"Continuous: Uniform, Normal, Exponential, Gamma, Beta, Log-Normal, Weibull, Chi-Squared, Student’s t Discrete: Bernoulli, Binomial, Poisson, Negative Binomial","code":""},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"extended-distributions-v050","dir":"","previous_headings":"Supported Distributions","what":"Extended Distributions (v0.5.0)","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"Levy Stable: Alpha-stable random variates using Chambers-Mallows-Stuck algorithm Pareto: Heavy-tailed distribution extreme events modeling Cauchy: Fat-tailed distribution undefined mean Multivariate Normal: Correlated normal vectors (requires Eigen3) Gaussian Copula: Complex dependencies different marginal distributions","code":""},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"distribution-examples","dir":"","previous_headings":"Supported Distributions","what":"Distribution Examples","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"","code":"# Standard distributions createPRNG(list(distribution = \"normal\", normal_mean = 0, normal_sd = 1)) normal_samples <- generatePRNG(1000)  createPRNG(list(distribution = \"exponential\", exponential_lambda = 0.5)) exp_samples <- generatePRNG(1000)  # Extended distributions levy_samples <- generate_levy_stable(n = 1000, alpha = 1.5, beta = 0.5, mu = 0, sigma = 1) pareto_samples <- generate_pareto(n = 1000, xm = 1, alpha = 2.5) cauchy_samples <- generate_cauchy(n = 1000, location = 0, scale = 1)  # Multivariate normal mean_vec <- c(0, 0, 0) cov_mat <- matrix(c(1, 0.5, 0.2, 0.5, 1, 0.3, 0.2, 0.3, 1), 3, 3) mvn_samples <- generate_multivariate_normal(n = 1000, mean_vec, cov_mat)  # Gaussian copula correlation <- matrix(c(1, 0.7, 0.7, 1), 2, 2) marginals <- list(   list(type = \"cauchy\", location = 0, scale = 1),   list(type = \"pareto\", xm = 1, alpha = 3) ) copula_samples <- generate_with_copula(n = 1000, correlation, marginals)"},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"basic-usage","dir":"","previous_headings":"Usage","what":"Basic Usage","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"simplest way use qiprng default settings. generator automatically selects optimal parameters uses uniform distribution [0,1]:","code":"library(qiprng) createPRNG() x <- generatePRNG(10000) mean(x)  # ~0.5 var(x)   # ~1/12"},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"distributions","dir":"","previous_headings":"Usage","what":"Distributions","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"Configure generator different statistical distributions specifying distribution type parameters:","code":"# Normal distribution createPRNG(list(   distribution = \"normal\",   normal_mean = 0,   normal_sd = 1 )) norm_samples <- generatePRNG(1000)  # Exponential distribution createPRNG(list(   distribution = \"exponential\",   exponential_lambda = 0.5 )) exp_samples <- generatePRNG(1000)  # Switch distributions dynamically updatePRNG(list(distribution = \"poisson\", poisson_lambda = 3.5)) pois_samples <- generatePRNG(1000)"},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"advanced-configuration","dir":"","previous_headings":"Usage","what":"Advanced Configuration","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"high-performance applications, can customize precision, mixing strategies, parallelization:","code":"cfg <- list(   a = 2L, b = 5L, c = -2L,         # Custom quadratic coefficients   mpfr_precision = 256L,           # Higher precision (24-10000 bits)   mixing_strategy = \"cascade_mix\",  # Enhanced entropy mixing   use_parallel_filling = TRUE,     # Enable parallel generation   buffer_size = 100000             # Large buffer for efficiency ) createPRNG(cfg) high_quality_samples <- generatePRNG(1000000)"},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"thread-safe-example","dir":"","previous_headings":"Usage","what":"Thread-safe Example","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"","code":"library(qiprng) library(parallel)  # Create a thread-safe PRNG configuration createPRNG(list(   distribution = \"normal\",   normal_method = \"ziggurat\",   # Both ziggurat and box_muller are supported and fully thread-safe   use_threading = TRUE,         # Enable thread safety   use_parallel_filling = FALSE, # For maximum stability   buffer_size = 10000,          # Larger buffer for better performance   debug = TRUE                  # Enable debug output ))  # Use parallel processing with the thread-safe PRNG cl <- makeCluster(4) clusterEvalQ(cl, library(qiprng))  # The same PRNG can now be safely used across parallel workers results <- parSapply(cl, 1:4, function(i) {   # Each worker gets values from the shared thread-safe PRNG   values <- generatePRNG(5000)   c(mean = mean(values), sd = sd(values)) })  stopCluster(cl) print(results)"},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"reproducible-random-numbers","dir":"","previous_headings":"Usage","what":"Reproducible Random Numbers","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"scientific computing testing, can enable fully reproducible sequences: Note: seed provided, PRNG uses deterministic initialization maintaining mathematical properties. generator performs warm-period proper mixing. mode suitable research testing cryptographic applications. full determinism normal distributions, use normal_method = \"box_muller\".","code":"# Set a seed for reproducibility cfg <- list(   seed = 12345,   a = 2L,   b = 5L,   c = -2L ) createPRNG(cfg)  # This will always produce the same sequence set1 <- generatePRNG(100)  # Create another PRNG with the same seed cleanup_prng() createPRNG(cfg) set2 <- generatePRNG(100)  # Verify they're identical all(set1 == set2)  # TRUE"},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"multiqi-mixing-strategies","dir":"","previous_headings":"Usage","what":"MultiQI Mixing Strategies","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"","code":"# Multiple quadratic irrationals with mixing cfg <- list(   a = c(2, 3, 5),          # Multiple QI coefficients   b = c(7, 11, 13),   c = c(-3, -5, -7),   mixing_strategy = \"cascade_mix\"  # Choose mixing strategy ) createPRNG(cfg)  # Available strategies: # round_robin: Cycles through QIs sequentially (fastest) # xor_mix: XOR combines outputs for bit diffusion # averaging: Averages multiple QI outputs # modular_add: Modular addition of outputs # cascade_mix: Cascaded mixing for maximum entropy"},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"jump-ahead-functionality","dir":"","previous_headings":"Usage","what":"Jump-Ahead Functionality","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"","code":"# Efficiently skip ahead in the sequence createPRNG() initial <- generatePRNG(5)  # Jump ahead 1 billion steps - O(log n) complexity jumpAheadPRNG(1000000000) after_jump <- generatePRNG(5)  # Uses matrix exponentiation with MPFR arithmetic for: # - O(log n) time complexity # - Astronomical jump distances # - Full precision preservation"},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"statistical-testing","dir":"","previous_headings":"","what":"Statistical Testing","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"package includes comprehensive testing framework 70 statistical tests covering distribution uniformity, independence, correlation, entropy, cryptographic randomness. test suite implements NIST SP 800-22 standards along classical PRNG tests like coupon collector, poker test, birthday spacing. comparative benchmarks, qiprng achieves pass rates 95% across test categories minimal moment deviation, matching exceeding performance established generators like Mersenne Twister dqrng’s Threefry implementation. Running tests straightforward built-test framework:","code":"# Quick validation results <- test_prng(sample_size = 1e5)  # Comprehensive test suite suite <- create_prng_test_suite(   prng_func = function(n) generatePRNG(n),   categories = c(\"basic\", \"runs\", \"correlation\", \"binary\") ) results <- run_prng_test_suite(suite, save_report = TRUE)"},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"mathematical-foundation","dir":"","previous_headings":"","what":"Mathematical Foundation","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"generator implements quadratic irrational recurrence relation x_{n+1} = (·x_n² + b·x_n + c) mod 1, coefficients satisfy > 0, c < 0, discriminant b² - 4ac non-perfect square. formulation, based ergodic theory quadratic maps, ensures excellent statistical properties long periods. jump-ahead functionality uses matrix exponentiation MPFR arithmetic achieve O(log n) complexity, enabling efficient advancement astronomical distances (10^18+ steps) parallel stream generation. detailed mathematical theory proofs, see MATH.md.","code":""},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"performance-considerations","dir":"","previous_headings":"","what":"Performance Considerations","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"qiprng generator prioritizes cryptographic-quality randomness mathematical rigor raw speed. Using high-precision MPFR arithmetic optional ChaCha20 cryptographic mixing, runs approximately 50x slower simple linear congruential generators delivers superior statistical properties security guarantees. trade-worthwhile applications requiring cryptographic security, precise statistical control, reproducible research results, validated random number quality. general Monte Carlo simulations speed paramount cryptographic security required, standard generators like Mersenne Twister may appropriate.","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"core-functions","dir":"","previous_headings":"API Reference","what":"Core Functions","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"package provides simple yet powerful API random number generation: createPRNG(config) - Initializes new generator specified configuration generatePRNG(n) - Generates n random values using current settings updatePRNG(config) - Updates generator configuration dynamically jumpAheadPRNG(n) - Advances state n steps parallel streams reseedPRNG() - Reinitializes fresh entropy cleanupPRNG() - Releases resources cleans memory","code":""},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"configuration-options","dir":"","previous_headings":"API Reference","what":"Configuration Options","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"generator accepts numerous configuration parameters customize behavior. Key options include quadratic coefficients (, b, c), MPFR precision (24-10000 bits), distribution type parameters, mixing strategy multiple QIs, cryptographic mixing settings, parallelization options. See package documentation complete parameter descriptions valid ranges.","code":""},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"testing-functions","dir":"","previous_headings":"API Reference","what":"Testing Functions","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"testing framework provides comprehensive validation capabilities test_prng() quick validation, create_prng_test_suite() custom test configurations, run_prng_test_suite() executing full test batteries detailed reporting.","code":""},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"R (>= 4.0.0) Rcpp (>= 1.0.0) MPFR library (high-precision arithmetic) libsodium (optional cryptographic mixing)","code":""},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"contribution","dir":"","previous_headings":"","what":"Contribution","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"Contributions welcome! Please feel free submit Pull Request. Fork repository Create feature branch (git checkout -b feature/AmazingFeature) Commit changes (git commit -m 'Add AmazingFeature') Push branch (git push origin feature/AmazingFeature) Open Pull Request","code":""},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"use package research, please cite:","code":"@Manual{qiprng,   title = {qiprng: Quadratic Irrational Pseudo-Random Number Generator for R},   author = {Sergey Kornilov},   year = {2025},   note = {R package version 0.5.0},   url = {https://github.com/biostochastics/qiprng} }"},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"project licensed MIT License - see LICENSE file details.","code":""},{"path":"https://biostochastics.github.io/qiprng/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"QIPRNG - Quadratic Irrational Pseudo-Random Number Generator","text":"Sergey Kornilov - sergey.kornilov@biostochastics.com Project Link: https://github.com/biostochastics/qiprng Part Biostochastics collection tools translational science biomarker discovery","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/QPRNG_TEST_CATEGORIES.html","id":null,"dir":"Reference","previous_headings":"","what":"List of available test categories — QPRNG_TEST_CATEGORIES","title":"List of available test categories — QPRNG_TEST_CATEGORIES","text":"named list available test categories PRNG testing.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/QPRNG_TEST_CATEGORIES.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of available test categories — QPRNG_TEST_CATEGORIES","text":"","code":"QPRNG_TEST_CATEGORIES"},{"path":"https://biostochastics.github.io/qiprng/reference/QPRNG_TEST_CATEGORIES.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of available test categories — QPRNG_TEST_CATEGORIES","text":"named list following categories: basic Basic Distribution Tests runs Runs Independence Tests correlation Correlation Tests binary Binary Bitwise Tests classical Classical PRNG Tests compression Compression Tests external External Test Batteries","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/assess_discriminant_quality.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if discriminant parameters meet quality criteria — assess_discriminant_quality","title":"Check if discriminant parameters meet quality criteria — assess_discriminant_quality","text":"Based analysis findings, check discriminant parameters likely produce high-quality random numbers.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/assess_discriminant_quality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if discriminant parameters meet quality criteria — assess_discriminant_quality","text":"","code":"assess_discriminant_quality(a, b, c, discriminant)"},{"path":"https://biostochastics.github.io/qiprng/reference/assess_discriminant_quality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if discriminant parameters meet quality criteria — assess_discriminant_quality","text":"Parameter (small, 1-3 preferred) b Parameter b c Parameter c (moderately negative preferred) discriminant Discriminant value (1000-2000 range preferred)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/assess_discriminant_quality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if discriminant parameters meet quality criteria — assess_discriminant_quality","text":"list quality assessment","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/benchmark_large_generation.html","id":null,"dir":"Reference","previous_headings":"","what":"Benchmark large-scale random number generation — benchmark_large_generation","title":"Benchmark large-scale random number generation — benchmark_large_generation","text":"function focuses benchmarking performance random number generators generating large quantities random numbers. particularly useful evaluating scaling behavior memory efficiency different generators.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/benchmark_large_generation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Benchmark large-scale random number generation — benchmark_large_generation","text":"","code":"benchmark_large_generation(   n_values = c(1e6, 5e6, 1e7, 5e7),   configs = list(     \"default\" = list(),     \"optimized\" = list(buffer_size = 1e6)   ),   generators = list(     \"qiprng\" = function(n) generatePRNG(n),     \"base_r\" = function(n) runif(n)   ),   repetitions = 3 )"},{"path":"https://biostochastics.github.io/qiprng/reference/benchmark_large_generation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Benchmark large-scale random number generation — benchmark_large_generation","text":"n_values Vector large sample sizes benchmark configs List QIPRNG configurations test generators List generator functions compare repetitions Number repetitions benchmark","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/benchmark_large_generation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Benchmark large-scale random number generation — benchmark_large_generation","text":"list containing: results: Raw benchmark data summary: Summary statistics generator configuration plots: list ggplot objects visualizing results","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/reference/benchmark_large_generation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Benchmark large-scale random number generation — benchmark_large_generation","text":"","code":"if (FALSE) { # \\dontrun{ # Compare QIPRNG to base R for large sample sizes results <- benchmark_large_generation(   n_values = c(1e6, 5e6),   configs = list(     \"default\" = list(),     \"large_buffer\" = list(buffer_size = 100000)   ),   repetitions = 2 )  # View the results print(results$summary) print(results$plots$time_plot) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/benchmark_qiprng.html","id":null,"dir":"Reference","previous_headings":"","what":"Benchmark QIPRNG against other random number generators — benchmark_qiprng","title":"Benchmark QIPRNG against other random number generators — benchmark_qiprng","text":"function benchmarks QIPRNG package random number generators R. provides detailed performance comparisons across different sample sizes, configurations, distributions.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/benchmark_qiprng.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Benchmark QIPRNG against other random number generators — benchmark_qiprng","text":"","code":"benchmark_qiprng(   n_values = c(10, 100, 1000, 10000, 100000, 1000000),   generators = list(     \"qiprng\" = function(n) generatePRNG(n),     \"base_r\" = function(n) runif(n),     \"dqrng\" = function(n) dqrunif(n)   ),   distributions = c(\"uniform\", \"normal\", \"exponential\"),   repetitions = 10,   configs = list(     \"default\" = list(),     \"crypto\" = list(use_crypto_mixing = TRUE),     \"high_precision\" = list(mpfr_precision = 128)   ),   export_data = FALSE,   file = \"qiprng_benchmark.rds\" )"},{"path":"https://biostochastics.github.io/qiprng/reference/benchmark_qiprng.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Benchmark QIPRNG against other random number generators — benchmark_qiprng","text":"n_values Vector sample sizes benchmark generators List generator functions compare; function take n input return n random numbers distributions Character vector distributions test (\"uniform\", \"normal\", \"exponential\") repetitions Number repetitions benchmark configs List QIPRNG configurations test export_data Whether export raw benchmark data file Path save results export_data TRUE","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/benchmark_qiprng.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Benchmark QIPRNG against other random number generators — benchmark_qiprng","text":"list containing benchmark results plots: results: Raw benchmark data microbenchmark plots: list ggplot objects visualizing results","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/reference/benchmark_qiprng.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Benchmark QIPRNG against other random number generators — benchmark_qiprng","text":"","code":"if (FALSE) { # \\dontrun{ # Basic benchmark against R's built-in generator results <- benchmark_qiprng(   n_values = c(1000, 10000),   generators = list(     \"qiprng\" = function(n) generatePRNG(n),     \"base_r\" = function(n) runif(n)   ),   repetitions = 5 )  # Visualize the results print(results$plots$size_comparison) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/bootstrap_conf_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap confidence interval — bootstrap_conf_interval","title":"Bootstrap confidence interval — bootstrap_conf_interval","text":"Calculates bootstrap confidence intervals using percentile method. function utility can used alongside p-value calculations.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/bootstrap_conf_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap confidence interval — bootstrap_conf_interval","text":"","code":"bootstrap_conf_interval(   data,   statistic,   n_bootstraps = 10000,   conf_level = 0.95,   progress = TRUE,   seed = NULL )"},{"path":"https://biostochastics.github.io/qiprng/reference/bootstrap_conf_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap confidence interval — bootstrap_conf_interval","text":"data Numeric vector observations statistic Function computes statistic interest n_bootstraps Number bootstrap samples (default: 10000) conf_level Confidence level (default: 0.95) progress Logical; show progress bar (default: TRUE) seed Random seed reproducibility (default: NULL)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/bootstrap_conf_interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap confidence interval — bootstrap_conf_interval","text":"list containing: estimate Point estimate statistic conf_int Confidence interval numeric vector length 2 conf_level confidence level used bootstrap_distribution Vector bootstrap statistics","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/bootstrap_framework.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Framework for Statistical P-value Calculations — bootstrap_framework","title":"Bootstrap Framework for Statistical P-value Calculations — bootstrap_framework","text":"module provides bootstrap-based methods calculating p-values performing hypothesis tests, especially situations analytical distributions unknown complex.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/bootstrap_framework.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Framework for Statistical P-value Calculations — bootstrap_framework","text":"","code":"bootstrap_p_value(   data,   test_statistic,   observed_stat = NULL,   n_bootstraps = 10000,   alternative = \"two.sided\",   progress = TRUE,   seed = NULL )"},{"path":"https://biostochastics.github.io/qiprng/reference/bootstrap_framework.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Framework for Statistical P-value Calculations — bootstrap_framework","text":"data Numeric vector observations test_statistic Function computes test statistic data observed_stat observed test statistic (NULL, computed) n_bootstraps Number bootstrap samples (default: 10000) alternative Character string specifying alternative hypothesis: \"two.sided\", \"less\", \"greater\" (default: \"two.sided\") progress Logical; show progress bar long computations (default: TRUE) seed Random seed reproducibility (default: NULL)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/bootstrap_framework.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Framework for Statistical P-value Calculations — bootstrap_framework","text":"list containing: p.value bootstrap p-value bootstrap_stats Vector bootstrap test statistics observed_stat observed test statistic n_bootstraps Number bootstrap samples used","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/bootstrap_framework.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap Framework for Statistical P-value Calculations — bootstrap_framework","text":"framework includes: Bootstrap p-value calculation using resampling Permutation testing non-parametric hypothesis tests Monte Carlo p-value estimation via simulation methods particularly useful compression tests statistical tests null distribution well-defined.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/bootstrap_framework.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Framework for Statistical P-value Calculations — bootstrap_framework","text":"","code":"if (FALSE) { # \\dontrun{ # Test if mean differs from 0.5 x <- runif(100) stat_func <- function(d) mean(d) - 0.5 result <- bootstrap_p_value(x, stat_func) print(result$p.value) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/cached_acf.html","id":null,"dir":"Reference","previous_headings":"","what":"Cached ACF function — cached_acf","title":"Cached ACF function — cached_acf","text":"Cached wrapper stats::acf() function. Uses R.cache store results repeated calls data parameters.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/cached_acf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cached ACF function — cached_acf","text":"","code":"cached_acf(x, lag.max = NULL, ...)"},{"path":"https://biostochastics.github.io/qiprng/reference/cached_acf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cached ACF function — cached_acf","text":"x univariate multivariate time series lag.max Maximum lag calculate acf ... Additional arguments passed acf()","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/cached_acf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cached ACF function — cached_acf","text":"object class \"acf\"","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/cached_compress.html","id":null,"dir":"Reference","previous_headings":"","what":"Cached compression function — cached_compress","title":"Cached compression function — cached_compress","text":"Cached wrapper memCompress() function. Uses R.cache store results repeated compressions data parameters.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/cached_compress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cached compression function — cached_compress","text":"","code":"cached_compress(x, type = c(\"gzip\", \"bzip2\", \"xz\"), ...)"},{"path":"https://biostochastics.github.io/qiprng/reference/cached_compress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cached compression function — cached_compress","text":"x raw vector compress type Compression type ... Additional arguments passed memCompress()","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/cached_compress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cached compression function — cached_compress","text":"Compressed raw vector","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/cached_pacf.html","id":null,"dir":"Reference","previous_headings":"","what":"Cached PACF function — cached_pacf","title":"Cached PACF function — cached_pacf","text":"Cached wrapper stats::pacf() function. Uses R.cache store results repeated calls data parameters.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/cached_pacf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cached PACF function — cached_pacf","text":"","code":"cached_pacf(x, lag.max = NULL, ...)"},{"path":"https://biostochastics.github.io/qiprng/reference/cached_pacf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cached PACF function — cached_pacf","text":"x univariate multivariate time series lag.max Maximum lag calculate pacf ... Additional arguments passed pacf()","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/cached_pacf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cached PACF function — cached_pacf","text":"object class \"acf\"","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/cached_spectrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Cached spectrum function — cached_spectrum","title":"Cached spectrum function — cached_spectrum","text":"Cached wrapper stats::spectrum() function. Uses R.cache store results repeated calls data parameters.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/cached_spectrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cached spectrum function — cached_spectrum","text":"","code":"cached_spectrum(x, ...)"},{"path":"https://biostochastics.github.io/qiprng/reference/cached_spectrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cached spectrum function — cached_spectrum","text":"x univariate multivariate time series ... Additional arguments passed spectrum()","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/cached_spectrum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cached spectrum function — cached_spectrum","text":"object class \"spec\"","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/cached_test_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Memoized test result wrapper — cached_test_result","title":"Memoized test result wrapper — cached_test_result","text":"Caches entire test results category-specific TTL support. function wraps test execution provide transparent caching test results, significantly improving performance repeated test runs data.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/cached_test_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Memoized test result wrapper — cached_test_result","text":"","code":"cached_test_result(test_func, test_name, test_category, data, config, ...)"},{"path":"https://biostochastics.github.io/qiprng/reference/cached_test_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Memoized test result wrapper — cached_test_result","text":"test_func Function performs test test_name Name specific test test_category Category test (e.g., \"basic\", \"correlation\") data data test config Test configuration ... Additional arguments passed test_func","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/cached_test_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Memoized test result wrapper — cached_test_result","text":"Test result (cache freshly computed)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/cleanupPRNG.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up PRNG resources — cleanupPRNG","title":"Clean up PRNG resources — cleanupPRNG","text":"Cleans global PRNG instance thread-safe manner. function safely releases PRNG resources, including thread-local storage, memory buffers, cryptographic state.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/cleanupPRNG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up PRNG resources — cleanupPRNG","text":"","code":"cleanupPRNG()"},{"path":"https://biostochastics.github.io/qiprng/reference/cleanupPRNG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean up PRNG resources — cleanupPRNG","text":"Invisibly returns NULL","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/cleanupPRNG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean up PRNG resources — cleanupPRNG","text":"Thread safety: function implements two-phase cleanup process first disables threading prevent new generations cleanup, releases resources controlled manner. approach ensures memory safety even multi-threaded environments.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/cleanupPRNG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean up PRNG resources — cleanupPRNG","text":"","code":"# Create PRNG createPRNG() #> Loaded 370 discriminants from CSV file. #> Warning: Some inexact results in square root operations are normal and expected #> Warning: MPFR multiplication operation resulted in inexact value #> Warning: MPFR addition operation resulted in inexact value #> Warning: MPFR add_scalar operation resulted in inexact value #> Warning: MPFR step_once operation operation resulted in inexact value #> Warning: MPFR multiplication operation resulted in inexact value  # Use the PRNG generatePRNG(10) #>  [1] 0.6268543 0.6714969 0.3917363 0.5079226 0.5799415 0.7870246 0.3346550 #>  [8] 0.2078782 0.2255380 0.9373543  # Clean up when done cleanupPRNG() #> PRNG cleanup completed successfully"},{"path":"https://biostochastics.github.io/qiprng/reference/cleanup_prng.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up PRNG resources (alias) — cleanup_prng","title":"Clean up PRNG resources (alias) — cleanup_prng","text":"alias cleanupPRNG() backward compatibility.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/cleanup_prng.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up PRNG resources (alias) — cleanup_prng","text":"","code":"cleanup_prng()"},{"path":"https://biostochastics.github.io/qiprng/reference/cleanup_prng.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean up PRNG resources (alias) — cleanup_prng","text":"Invisibly returns NULL","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/clear_qiprng_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear the cache — clear_qiprng_cache","title":"Clear the cache — clear_qiprng_cache","text":"Removes cached results specific cache entries.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/clear_qiprng_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear the cache — clear_qiprng_cache","text":"","code":"clear_qiprng_cache(pattern = NULL)"},{"path":"https://biostochastics.github.io/qiprng/reference/clear_qiprng_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear the cache — clear_qiprng_cache","text":"pattern Optional pattern match specific cache entries","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/clear_qiprng_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear the cache — clear_qiprng_cache","text":"Invisible NULL","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/clear_test_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear test result cache — clear_test_cache","title":"Clear test result cache — clear_test_cache","text":"Removes cached test results specific category categories.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/clear_test_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear test result cache — clear_test_cache","text":"","code":"clear_test_cache(category = NULL)"},{"path":"https://biostochastics.github.io/qiprng/reference/clear_test_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear test result cache — clear_test_cache","text":"category Test category clear (NULL categories)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/clear_test_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear test result cache — clear_test_cache","text":"Invisible NULL","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/compare_rng_quality.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare the quality of random numbers from different generators — compare_rng_quality","title":"Compare the quality of random numbers from different generators — compare_rng_quality","text":"function performs comprehensive quality assessment different random number generators, applying various statistical tests visualizations evaluate randomness, uniformity, independence properties.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/compare_rng_quality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare the quality of random numbers from different generators — compare_rng_quality","text":"","code":"compare_rng_quality(   n = 50000,   generators = list(     \"qiprng\" = function(n) generatePRNG(n),     \"base_r\" = function(n) runif(n)   ),   save_plots = TRUE,   output_dir = \"quality_comparison\" )"},{"path":"https://biostochastics.github.io/qiprng/reference/compare_rng_quality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare the quality of random numbers from different generators — compare_rng_quality","text":"n Sample size use quality assessment generators List generator functions compare save_plots Whether save quality comparison plots disk output_dir Directory save plots save_plots TRUE","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/compare_rng_quality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare the quality of random numbers from different generators — compare_rng_quality","text":"list containing: metrics: Data frame statistical quality metrics generator plots: List ggplot objects visualizing quality assessments raw_data: Raw random number samples used assessment","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/reference/compare_rng_quality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare the quality of random numbers from different generators — compare_rng_quality","text":"","code":"if (FALSE) { # \\dontrun{ # Compare quality between QIPRNG and R's built-in generator quality <- compare_rng_quality(   n = 20000,   generators = list(     \"qiprng\" = function(n) generatePRNG(n),     \"base_r\" = function(n) runif(n)   ),   save_plots = FALSE )  # View quality metrics print(quality$metrics)  # Display one of the comparison plots print(quality$plots$qq_plot) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/convert_qmd_to_rmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Quarto document to R Markdown (fallback) — convert_qmd_to_rmd","title":"Convert Quarto document to R Markdown (fallback) — convert_qmd_to_rmd","text":"Convert Quarto document R Markdown (fallback)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/convert_qmd_to_rmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Quarto document to R Markdown (fallback) — convert_qmd_to_rmd","text":"","code":"convert_qmd_to_rmd(qmd_file)"},{"path":"https://biostochastics.github.io/qiprng/reference/convert_qmd_to_rmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Quarto document to R Markdown (fallback) — convert_qmd_to_rmd","text":"qmd_file Path .qmd file","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/createPRNG.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new PRNG instance — createPRNG","title":"Create a new PRNG instance — createPRNG","text":"Creates new global PRNG instance specified configuration. function initializes new pseudo-random number generator based quadratic irrationals configurable parameters.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/createPRNG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new PRNG instance — createPRNG","text":"","code":"createPRNG(config = default_config)"},{"path":"https://biostochastics.github.io/qiprng/reference/createPRNG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new PRNG instance — createPRNG","text":"config List configuration parameters. Default values provided default_config. Possible parameters include: , b, c Integer parameters quadratic equation (ax² + bx + c). Must satisfy b² - 4ac > 0 mpfr_precision Integer precision bits MPFR computations (24-10000) buffer_size Integer size buffer random numbers distribution String specifying distribution: \"uniform_01\", \"uniform_range\", \"normal\", \"exponential\", \"poisson\", \"gamma\", \"beta\" range_min, range_max Numeric bounds uniform_range distribution normal_mean, normal_sd Parameters normal distribution exponential_lambda Rate parameter exponential distribution poisson_lambda Rate parameter Poisson distribution gamma_shape, gamma_scale Parameters gamma distribution beta_alpha, beta_beta Parameters beta distribution use_crypto_mixing Logical: whether apply cryptographic mixing reseed_interval Integer: number iterations automatic reseeds use_threading Logical: whether enable thread-local PRNG instances use_csv_discriminants Logical: whether use custom discriminants discriminants.csv use_excellent_only Logical: whether restrict excellent discriminants (max_abs_acf <= 0.010) quality_threshold Numeric: maximum autocorrelation threshold discriminant selection use_parallel_filling Logical: whether use parallel buffer filling mixing_strategy String: entropy mixing strategy multi-QI ensemble (v0.5.0). Options: \"round_robin\" (default), \"xor_mix\", \"averaging\", \"modular_add\", \"cascade_mix\" debug Logical: whether enable debugging output seed Numeric seed reproducible sequences (0 2^53-1). provided, random initialization replaced deterministic seeding. Default NULL uses secure random initialization.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/createPRNG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new PRNG instance — createPRNG","text":"Invisibly returns NULL","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/createPRNG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a new PRNG instance — createPRNG","text":"Thread safety information: package uses global PRNG instance protected mutex. comprehensive thread safety provided mutex protection thread-local storage, heavy parallel workloads recommended set use_threading=TRUE configuration.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/createPRNG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new PRNG instance — createPRNG","text":"","code":"# Create PRNG with default settings createPRNG()  # Create PRNG with custom configuration createPRNG(list(   a = 3L,   b = 7L,   c = -5L,   distribution = \"normal\",   normal_mean = 10,   normal_sd = 2,   use_threading = TRUE ))  # Create PRNG with seed for reproducible sequences createPRNG(list(seed = 12345)) #> Error: SECURITY ERROR: Using deterministic seed with crypto mixing defeats cryptographic security. Either disable crypto mixing or remove the seed. seq1 <- generatePRNG(10)  # Same seed produces same sequence cleanup_prng() #> PRNG cleanup completed successfully createPRNG(list(seed = 12345)) #> Error: SECURITY ERROR: Using deterministic seed with crypto mixing defeats cryptographic security. Either disable crypto mixing or remove the seed. seq2 <- generatePRNG(10) #> Error: Cannot generate: No active global PRNG identical(seq1, seq2) # TRUE #> Error: object 'seq2' not found"},{"path":"https://biostochastics.github.io/qiprng/reference/create_excellent_prng_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Create PRNG configuration using excellent discriminant — create_excellent_prng_config","title":"Create PRNG configuration using excellent discriminant — create_excellent_prng_config","text":"Creates complete PRNG configuration object single excellent discriminant parameter set. configuration optimized high-quality random number generation.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/create_excellent_prng_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create PRNG configuration using excellent discriminant — create_excellent_prng_config","text":"","code":"create_excellent_prng_config(   discriminant_params,   precision = 256,   use_crypto = TRUE )"},{"path":"https://biostochastics.github.io/qiprng/reference/create_excellent_prng_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create PRNG configuration using excellent discriminant — create_excellent_prng_config","text":"discriminant_params single-row data frame excellent discriminants containing columns , b, c, discriminant, overall_score precision MPFR precision bits calculations (default: 256) use_crypto Enable cryptographic mixing ChaCha20 (default: TRUE)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/create_excellent_prng_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create PRNG configuration using excellent discriminant — create_excellent_prng_config","text":"list containing PRNG configuration: Quadratic coefficient b Linear coefficient c Constant term precision MPFR precision bits use_parallel_filling Set FALSE stability use_cryptographic_mixing ChaCha20 mixing flag","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/create_excellent_prng_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create PRNG configuration using excellent discriminant — create_excellent_prng_config","text":"function creates configuration optimized production use: Parallel filling disabled avoid performance issues Cryptographic mixing enabled default enhanced security discriminant parameters validated excellent set function also prints summary configuration including discriminant value quality score.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/create_excellent_prng_config.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create PRNG configuration using excellent discriminant — create_excellent_prng_config","text":"discriminant_params must single row. Use indexing subset operations working multiple discriminants.","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/reference/create_excellent_prng_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create PRNG configuration using excellent discriminant — create_excellent_prng_config","text":"","code":"if (FALSE) { # \\dontrun{ # Get the best discriminant and create config excellent <- load_excellent_discriminants() best_discriminant <- excellent[1, ] config <- create_excellent_prng_config(best_discriminant)  # Create config with custom precision config_512 <- create_excellent_prng_config(best_discriminant, precision = 512) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/create_prng_test_suite.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a PRNG test suite — create_prng_test_suite","title":"Create a PRNG test suite — create_prng_test_suite","text":"Creates comprehensive test suite evaluating statistical quality pseudo-random number generator. test suite can include various categories tests can configured run different sample sizes parameters.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/create_prng_test_suite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a PRNG test suite — create_prng_test_suite","text":"","code":"create_prng_test_suite(   prng_func,   config = default_test_config,   categories = names(QPRNG_TEST_CATEGORIES) )"},{"path":"https://biostochastics.github.io/qiprng/reference/create_prng_test_suite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a PRNG test suite — create_prng_test_suite","text":"prng_func function generates n random numbers called prng_func(n) config Test configuration parameters (see default_test_config) categories Test categories include. Available options: \"basic\", \"runs\", \"correlation\", \"binary\", \"classical\", \"compression\", \"external\". Default includes categories.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/create_prng_test_suite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a PRNG test suite — create_prng_test_suite","text":"test suite object can executed run_prng_test_suite","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/create_prng_test_suite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a PRNG test suite — create_prng_test_suite","text":"","code":"if (FALSE) { # \\dontrun{ # Create a test suite for R's built-in runif suite <- create_prng_test_suite(function(n) runif(n))  # Create a test suite for qiprng createPRNG() # Initialize with defaults suite <- create_prng_test_suite(function(n) generatePRNG(n))  # Create a focused test suite with only basic and classical tests suite <- create_prng_test_suite(   function(n) generatePRNG(n),   categories = c(\"basic\", \"classical\") ) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/create_visualizations.html","id":null,"dir":"Reference","previous_headings":"","what":"Create visualizations for discriminant analysis — create_visualizations","title":"Create visualizations for discriminant analysis — create_visualizations","text":"Create visualizations discriminant analysis","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/create_visualizations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create visualizations for discriminant analysis — create_visualizations","text":"","code":"create_visualizations(summary_data)"},{"path":"https://biostochastics.github.io/qiprng/reference/create_visualizations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create visualizations for discriminant analysis — create_visualizations","text":"summary_data Summary statistics data frame","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/create_visualizations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create visualizations for discriminant analysis — create_visualizations","text":"List ggplot objects","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/default_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Default configuration for PRNG — default_config","title":"Default configuration for PRNG — default_config","text":"list containing default configuration parameters QIPRNG generator. provides baseline configuration can modified creating new PRNG instance.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/default_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default configuration for PRNG — default_config","text":"","code":"default_config"},{"path":"https://biostochastics.github.io/qiprng/reference/default_config.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default configuration for PRNG — default_config","text":"list following components: , b, c Integer parameters quadratic equation (ax² + bx + c) mpfr_precision Integer precision bits MPFR computations buffer_size Integer size buffer random numbers distribution String specifying default distribution range_min, range_max Numeric bounds uniform_range distribution normal_mean, normal_sd Parameters normal distribution exponential_lambda Rate parameter exponential distribution poisson_lambda Rate parameter Poisson distribution gamma_shape, gamma_scale Parameters gamma distribution beta_alpha, beta_beta Parameters beta distribution use_crypto_mixing Logical: whether apply cryptographic mixing reseed_interval Integer: number iterations automatic reseeds use_threading Logical: whether enable thread-local PRNG instances use_csv_discriminants Logical: whether use custom discriminants file use_parallel_filling Logical: whether use parallel buffer filling mixing_strategy String: entropy mixing strategy multi-QI ensemble (v0.5.0). Options: \"round_robin\" (default), \"xor_mix\", \"averaging\", \"modular_add\", \"cascade_mix\" debug Logical: whether enable debugging output","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/default_test_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Default test configuration — default_test_config","title":"Default test configuration — default_test_config","text":"Default configuration parameters running PRNG test suite. parameters control sample sizes, statistical test parameters, visualization options, processing settings.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/default_test_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default test configuration — default_test_config","text":"","code":"default_test_config"},{"path":"https://biostochastics.github.io/qiprng/reference/default_test_config.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default test configuration — default_test_config","text":"list following components: basic_sample_size Sample size basic distribution tests runs_sample_size Sample size runs independence tests correlation_sample_size Sample size correlation tests binary_sample_size Sample size binary bitwise tests classical_sample_size Sample size classical statistical tests compression_sample_size Sample size compression-based tests external_sample_size Sample size external test batteries chi_squared_bins Number bins chi-squared tests significance_level Statistical significance level hypothesis tests plot_width, plot_height, plot_dpi Visualization parameters save_results, save_visualizations Whether save results visualizations verbose Whether print progress information output_dir Directory save results visualizations use_dieharder, use_dieharder_quick, use_ent External test options parallel, cores Parallel processing options","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/dot-onLoad.html","id":null,"dir":"Reference","previous_headings":"","what":"Package initialization function — .onLoad","title":"Package initialization function — .onLoad","text":"Called package loaded. Initializes package environment, sets cryptographic backend (libsodium), registers cleanup handlers.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/dot-onLoad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package initialization function — .onLoad","text":"","code":".onLoad(libname, pkgname)"},{"path":"https://biostochastics.github.io/qiprng/reference/dot-onLoad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package initialization function — .onLoad","text":"libname library path package installed pkgname name package (\"qiprng\")","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/dot-onUnload.html","id":null,"dir":"Reference","previous_headings":"","what":"Package unload function — .onUnload","title":"Package unload function — .onUnload","text":"Called package unloaded. Cleans package resources including PRNG instance prevent memory leaks ensure proper shutdown.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/dot-onUnload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package unload function — .onUnload","text":"","code":".onUnload(libpath)"},{"path":"https://biostochastics.github.io/qiprng/reference/dot-onUnload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package unload function — .onUnload","text":"libpath library path package installed","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/export_cached_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Export cached test results — export_cached_results","title":"Export cached test results — export_cached_results","text":"Exports cached test results file archival sharing.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/export_cached_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export cached test results — export_cached_results","text":"","code":"export_cached_results(file, category = NULL)"},{"path":"https://biostochastics.github.io/qiprng/reference/export_cached_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export cached test results — export_cached_results","text":"file Path export file (RDS format) category Optional category filter","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/export_cached_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export cached test results — export_cached_results","text":"Invisible TRUE success","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generatePRNG.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random numbers — generatePRNG","title":"Generate random numbers — generatePRNG","text":"Generates random numbers using current PRNG configuration. distribution type parameters determined current configuration set createPRNG() updatePRNG().","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generatePRNG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random numbers — generatePRNG","text":"","code":"generatePRNG(n)"},{"path":"https://biostochastics.github.io/qiprng/reference/generatePRNG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random numbers — generatePRNG","text":"n Number random numbers generate","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generatePRNG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random numbers — generatePRNG","text":"Numeric vector length n values configured distribution","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generatePRNG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate random numbers — generatePRNG","text":"Thread safety: function fully thread-safe block mutex acquired. use_threading=TRUE set configuration, uses thread-local storage improved performance multi-threaded environments.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generatePRNG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random numbers — generatePRNG","text":"","code":"# Create default PRNG (uniform 0-1) createPRNG()  # Generate 5 uniform random numbers generatePRNG(5) #> [1] 0.5845888 0.5224540 0.2667811 0.5146450 0.9219316  # Switch to normal distribution updatePRNG(list(distribution = \"normal\", normal_mean = 0, normal_sd = 1))  # Generate 5 normally distributed random numbers generatePRNG(5) #> [1] -1.2242898  0.6952750  0.5914436  1.1139125  1.7739918"},{"path":"https://biostochastics.github.io/qiprng/reference/generate_cauchy.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Cauchy Distribution — generate_cauchy","title":"Generate Cauchy Distribution — generate_cauchy","text":"Generates random numbers Cauchy distribution.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_cauchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Cauchy Distribution — generate_cauchy","text":"","code":"generate_cauchy(n, location = 0, scale = 1)"},{"path":"https://biostochastics.github.io/qiprng/reference/generate_cauchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Cauchy Distribution — generate_cauchy","text":"n Number random values generate location Location parameter (median distribution) scale Scale parameter (must positive)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_cauchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Cauchy Distribution — generate_cauchy","text":"Numeric vector n random values Cauchy distribution","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_cauchy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Cauchy Distribution — generate_cauchy","text":"Cauchy distribution heavy-tailed distribution defined mean variance. distribution ratio two independent normal random variables.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_cauchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Cauchy Distribution — generate_cauchy","text":"","code":"if (FALSE) { # \\dontrun{ # Standard Cauchy distribution x <- generate_cauchy(1000)  # Cauchy with different location and scale y <- generate_cauchy(1000, location = 5, scale = 2) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/generate_detailed_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate detailed report for top and bottom performers — generate_detailed_report","title":"Generate detailed report for top and bottom performers — generate_detailed_report","text":"Generate detailed report top bottom performers","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_detailed_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate detailed report for top and bottom performers — generate_detailed_report","text":"","code":"generate_detailed_report(results, summary_data, n_top = 5, n_bottom = 5)"},{"path":"https://biostochastics.github.io/qiprng/reference/generate_detailed_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate detailed report for top and bottom performers — generate_detailed_report","text":"results List test results summary_data Summary statistics data frame n_top Number top performers report n_bottom Number bottom performers report","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_detailed_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate detailed report for top and bottom performers — generate_detailed_report","text":"Character string detailed report","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_excellent_random.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random numbers using an excellent discriminant — generate_excellent_random","title":"Generate random numbers using an excellent discriminant — generate_excellent_random","text":"Convenience function loads excellent discriminants, selects one index, creates PRNG configuration, generates random numbers. Combines functionality multiple functions ease use.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_excellent_random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random numbers using an excellent discriminant — generate_excellent_random","text":"","code":"generate_excellent_random(   n = 10000,   discriminant_index = 1,   results_file = \"discriminant_analysis_results/raw_results.rds\",   precision = 256 )"},{"path":"https://biostochastics.github.io/qiprng/reference/generate_excellent_random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random numbers using an excellent discriminant — generate_excellent_random","text":"n Number random numbers generate (default: 10000) discriminant_index Index discriminant use 1 = best, 2 = second best, etc. (default: 1) results_file Path analysis results RDS file (default: \"discriminant_analysis_results/raw_results.rds\") precision MPFR precision bits (default: 256)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_excellent_random.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random numbers using an excellent discriminant — generate_excellent_random","text":"numeric vector n random numbers uniformly distributed 0,1","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_excellent_random.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate random numbers using an excellent discriminant — generate_excellent_random","text":"function: Loads excellent discriminants results file Selects discriminant specified index (sorted score) Creates PRNG configuration cryptographic mixing enabled Initializes PRNG Generates requested random numbers discriminants ordered overall_score, index 1 gives highest-scoring discriminant.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_excellent_random.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate random numbers using an excellent discriminant — generate_excellent_random","text":"Requires discriminant analysis run results saved. discriminant_index must exceed number available excellent discriminants (typically 370).","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/reference/generate_excellent_random.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random numbers using an excellent discriminant — generate_excellent_random","text":"","code":"if (FALSE) { # \\dontrun{ # Generate random numbers using the best discriminant samples <- generate_excellent_random(n = 50000) hist(samples, breaks = 50)  # Use the 10th best discriminant samples <- generate_excellent_random(n = 10000, discriminant_index = 10)  # Use higher precision samples <- generate_excellent_random(n = 5000, precision = 512) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/generate_levy_stable.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Levy Stable Distribution — generate_levy_stable","title":"Generate Levy Stable Distribution — generate_levy_stable","text":"Generates random numbers Levy stable distribution using Chambers-Mallows-Stuck method.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_levy_stable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Levy Stable Distribution — generate_levy_stable","text":"","code":"generate_levy_stable(n, alpha, beta = 0, mu = 0, sigma = 1)"},{"path":"https://biostochastics.github.io/qiprng/reference/generate_levy_stable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Levy Stable Distribution — generate_levy_stable","text":"n Number random values generate alpha Stability parameter (0,2]. Alpha=2 gives normal distribution, alpha=1 gives Cauchy distribution beta Skewness parameter -1,1. Beta=0 gives symmetric distribution mu Location parameter sigma Scale parameter (must positive)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_levy_stable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Levy Stable Distribution — generate_levy_stable","text":"Numeric vector n random values Levy stable distribution","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_levy_stable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Levy Stable Distribution — generate_levy_stable","text":"Levy stable distribution family continuous probability distributions parameterized stability (alpha) skewness (beta). includes normal (alpha=2), Cauchy (alpha=1), Levy (alpha=0.5, beta=1) distributions special cases.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_levy_stable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Levy Stable Distribution — generate_levy_stable","text":"","code":"if (FALSE) { # \\dontrun{ # Generate from symmetric stable distribution x <- generate_levy_stable(1000, alpha = 1.5, beta = 0)  # Generate from skewed stable distribution y <- generate_levy_stable(1000, alpha = 1.8, beta = 0.5, mu = 2, sigma = 1) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/generate_multivariate_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Multivariate Normal Distribution — generate_multivariate_normal","title":"Generate Multivariate Normal Distribution — generate_multivariate_normal","text":"Generates random vectors multivariate normal distribution using Cholesky decomposition.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_multivariate_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Multivariate Normal Distribution — generate_multivariate_normal","text":"","code":"generate_multivariate_normal(n, mean, covariance)"},{"path":"https://biostochastics.github.io/qiprng/reference/generate_multivariate_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Multivariate Normal Distribution — generate_multivariate_normal","text":"n Number random vectors generate mean Mean vector length d covariance Covariance matrix (d x d, must positive definite)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_multivariate_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Multivariate Normal Distribution — generate_multivariate_normal","text":"Matrix n rows d columns, row random vector","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_multivariate_normal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Multivariate Normal Distribution — generate_multivariate_normal","text":"Uses Cholesky decomposition covariance matrix transform independent standard normal variables correlated multivariate normal variables. Requires Eigen library.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_multivariate_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Multivariate Normal Distribution — generate_multivariate_normal","text":"","code":"if (FALSE) { # \\dontrun{ # 2D multivariate normal mean <- c(0, 0) cov <- matrix(c(1, 0.5, 0.5, 1), 2, 2) x <- generate_multivariate_normal(1000, mean, cov)  # 3D multivariate normal with correlation mean3 <- c(1, 2, 3) cov3 <- matrix(c(   1, 0.3, 0.2,   0.3, 1, 0.4,   0.2, 0.4, 1 ), 3, 3) y <- generate_multivariate_normal(1000, mean3, cov3) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/generate_pareto.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Pareto Distribution — generate_pareto","title":"Generate Pareto Distribution — generate_pareto","text":"Generates random numbers Pareto distribution.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_pareto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Pareto Distribution — generate_pareto","text":"","code":"generate_pareto(n, xm, alpha)"},{"path":"https://biostochastics.github.io/qiprng/reference/generate_pareto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Pareto Distribution — generate_pareto","text":"n Number random values generate xm Scale parameter (minimum value, must positive) alpha Shape parameter (must positive)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_pareto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Pareto Distribution — generate_pareto","text":"Numeric vector n random values Pareto distribution","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_pareto.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Pareto Distribution — generate_pareto","text":"Pareto distribution heavy-tailed distribution often used economics actuarial science. follows 80-20 rule useful modeling phenomena power-law tails.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_pareto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Pareto Distribution — generate_pareto","text":"","code":"if (FALSE) { # \\dontrun{ # Generate from Pareto distribution x <- generate_pareto(1000, xm = 1, alpha = 2)  # Heavy-tailed distribution (smaller alpha = heavier tail) y <- generate_pareto(1000, xm = 10, alpha = 1.5) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/generate_quarto_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate and render comprehensive Quarto report — generate_quarto_report","title":"Generate and render comprehensive Quarto report — generate_quarto_report","text":"Generate render comprehensive Quarto report","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_quarto_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate and render comprehensive Quarto report — generate_quarto_report","text":"","code":"generate_quarto_report(   results,   output_file = \"discriminant_analysis_report\",   validate_results = TRUE )"},{"path":"https://biostochastics.github.io/qiprng/reference/generate_quarto_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate and render comprehensive Quarto report — generate_quarto_report","text":"results List test results run_discriminant_analysis output_file Output filename (without extension) validate_results Whether perform validation checks","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_quarto_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate and render comprehensive Quarto report — generate_quarto_report","text":"List report status validation results","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_recommendations.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate recommendations based on validation results — generate_recommendations","title":"Generate recommendations based on validation results — generate_recommendations","text":"Generate recommendations based validation results","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_recommendations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate recommendations based on validation results — generate_recommendations","text":"","code":"generate_recommendations(report)"},{"path":"https://biostochastics.github.io/qiprng/reference/generate_recommendations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate recommendations based on validation results — generate_recommendations","text":"report Validation report","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_recommendations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate recommendations based on validation results — generate_recommendations","text":"Character vector recommendations","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_summary_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate summary statistics from test results — generate_summary_stats","title":"Generate summary statistics from test results — generate_summary_stats","text":"Generate summary statistics test results","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_summary_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate summary statistics from test results — generate_summary_stats","text":"","code":"generate_summary_stats(results)"},{"path":"https://biostochastics.github.io/qiprng/reference/generate_summary_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate summary statistics from test results — generate_summary_stats","text":"results List test results run_discriminant_analysis","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_summary_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate summary statistics from test results — generate_summary_stats","text":"Data frame summary statistics","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_with_copula.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Samples with Gaussian Copula — generate_with_copula","title":"Generate Samples with Gaussian Copula — generate_with_copula","text":"Generates random vectors specified marginal distributions dependence structure defined Gaussian copula.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_with_copula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Samples with Gaussian Copula — generate_with_copula","text":"","code":"generate_with_copula(n, correlation, marginals)"},{"path":"https://biostochastics.github.io/qiprng/reference/generate_with_copula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Samples with Gaussian Copula — generate_with_copula","text":"n Number random vectors generate correlation Correlation matrix defining copula (must positive definite) marginals List marginal distribution specifications. element list 'type' distribution-specific parameters","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_with_copula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Samples with Gaussian Copula — generate_with_copula","text":"Matrix n rows d columns, d number marginals","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_with_copula.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Samples with Gaussian Copula — generate_with_copula","text":"Gaussian copula allows combining arbitrary marginal distributions correlation structure. useful modeling multivariate distributions marginals normal dependencies exist.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_with_copula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Samples with Gaussian Copula — generate_with_copula","text":"","code":"if (FALSE) { # \\dontrun{ # Combine Cauchy and Pareto marginals with correlation correlation <- matrix(c(1, 0.6, 0.6, 1), 2, 2) marginals <- list(   list(type = \"cauchy\", location = 0, scale = 1),   list(type = \"pareto\", xm = 1, alpha = 2) ) x <- generate_with_copula(1000, correlation, marginals)  # Three different marginals with correlation corr3 <- matrix(c(   1, 0.3, 0.2,   0.3, 1, 0.4,   0.2, 0.4, 1 ), 3, 3) marg3 <- list(   list(type = \"levy\", alpha = 1.5, beta = 0, mu = 0, sigma = 1),   list(type = \"cauchy\", location = 2, scale = 1),   list(type = \"pareto\", xm = 1, alpha = 3) ) y <- generate_with_copula(1000, corr3, marg3) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/generate_with_discriminant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random numbers using specific discriminant parameters — generate_with_discriminant","title":"Generate random numbers using specific discriminant parameters — generate_with_discriminant","text":"Creates PRNG instance specified quadratic parameters generates random numbers. function uses cryptographic mixing enhanced quality.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_with_discriminant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random numbers using specific discriminant parameters — generate_with_discriminant","text":"","code":"generate_with_discriminant(a, b, c, n = 50000, precision = 256)"},{"path":"https://biostochastics.github.io/qiprng/reference/generate_with_discriminant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random numbers using specific discriminant parameters — generate_with_discriminant","text":"Quadratic coefficient (must > 0) b Linear coefficient c Constant term (must < 0) n Number samples generate (default: 50000) precision MPFR precision bits (default: 256)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_with_discriminant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random numbers using specific discriminant parameters — generate_with_discriminant","text":"numeric vector n random numbers uniformly distributed 0,1","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_with_discriminant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate random numbers using specific discriminant parameters — generate_with_discriminant","text":"function creates PRNG using quadratic recurrence relation: $$x_{n+1} = (x_n^2 + b x_n + c) \\mod 1$$ Key configuration: Cryptographic mixing enabled better randomness quality Parallel filling disabled avoid performance issues PRNG uses specified MPFR precision calculations","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/generate_with_discriminant.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate random numbers using specific discriminant parameters — generate_with_discriminant","text":"discriminant b² - 4ac must positive perfect square generator produce high-quality random numbers.","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/reference/generate_with_discriminant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random numbers using specific discriminant parameters — generate_with_discriminant","text":"","code":"if (FALSE) { # \\dontrun{ # Generate random numbers with specific parameters samples <- generate_with_discriminant(a = 2, b = 5, c = -2, n = 10000) hist(samples, breaks = 50) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/get_autocorrelation_thresholds.html","id":null,"dir":"Reference","previous_headings":"","what":"Get autocorrelation quality thresholds discovered through analysis — get_autocorrelation_thresholds","title":"Get autocorrelation quality thresholds discovered through analysis — get_autocorrelation_thresholds","text":"Empirically determined thresholds autocorrelation quality assessment: Excellent: max_abs_acf < 0.008, n_sig_lags = 0 Good: max_abs_acf < 0.012 Poor: max_abs_acf > 0.015","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/get_autocorrelation_thresholds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get autocorrelation quality thresholds discovered through analysis — get_autocorrelation_thresholds","text":"","code":"get_autocorrelation_thresholds()"},{"path":"https://biostochastics.github.io/qiprng/reference/get_autocorrelation_thresholds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get autocorrelation quality thresholds discovered through analysis — get_autocorrelation_thresholds","text":"list threshold values","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/get_excellent_discriminants.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the 422 excellent discriminants identified through comprehensive analysis — get_excellent_discriminants","title":"Get the 422 excellent discriminants identified through comprehensive analysis — get_excellent_discriminants","text":"discriminants selected comprehensive testing 750 candidates 1,000,000 samples . excellent discriminants : max_abs_acf <= 0.010 (empirical autocorrelation threshold) Enhanced autocorrelation testing (50 lags, 99% confidence) Passed comprehensive statistical validation","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/get_excellent_discriminants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the 422 excellent discriminants identified through comprehensive analysis — get_excellent_discriminants","text":"","code":"get_excellent_discriminants()"},{"path":"https://biostochastics.github.io/qiprng/reference/get_excellent_discriminants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the 422 excellent discriminants identified through comprehensive analysis — get_excellent_discriminants","text":"data.frame columns: , b, c, discriminant, overall_score, max_abs_acf, n_sig_lags","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/get_hardcoded_excellent_discriminants.html","id":null,"dir":"Reference","previous_headings":"","what":"Hardcoded top 50 excellent discriminants for fallback — get_hardcoded_excellent_discriminants","title":"Hardcoded top 50 excellent discriminants for fallback — get_hardcoded_excellent_discriminants","text":"top 50 performers comprehensive analysis, provided fallback full dataset available.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/get_hardcoded_excellent_discriminants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hardcoded top 50 excellent discriminants for fallback — get_hardcoded_excellent_discriminants","text":"","code":"get_hardcoded_excellent_discriminants()"},{"path":"https://biostochastics.github.io/qiprng/reference/get_hardcoded_excellent_discriminants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hardcoded top 50 excellent discriminants for fallback — get_hardcoded_excellent_discriminants","text":"data.frame top discriminants","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/get_recommended_discriminants.html","id":null,"dir":"Reference","previous_headings":"","what":"Get recommended discriminant parameters for production use — get_recommended_discriminants","title":"Get recommended discriminant parameters for production use — get_recommended_discriminants","text":"Selects subset excellent discriminants based specified criteria. Provides three selection strategies: highest scores, balanced test performance, diverse parameter ranges.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/get_recommended_discriminants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get recommended discriminant parameters for production use — get_recommended_discriminants","text":"","code":"get_recommended_discriminants(   n = 10,   results_file = \"discriminant_analysis_results/raw_results.rds\",   criteria = \"top_score\" )"},{"path":"https://biostochastics.github.io/qiprng/reference/get_recommended_discriminants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get recommended discriminant parameters for production use — get_recommended_discriminants","text":"n Number discriminants return (default: 10) results_file Path analysis results RDS file (default: \"discriminant_analysis_results/raw_results.rds\") criteria Selection criteria, one : \"top_score\" Select discriminants highest overall scores \"balanced\" Select discriminants pass tests uniformly \"diverse\" Select discriminants diverse parameter ranges using k-means clustering","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/get_recommended_discriminants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get recommended discriminant parameters for production use — get_recommended_discriminants","text":"data frame recommended discriminant parameters containing: , b, c Discriminant parameters discriminant discriminant value b² - 4ac overall_score Combined test score Test results Individual test pass/fail status balance_score \"balanced\" criteria, proportion tests passed","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/get_recommended_discriminants.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get recommended discriminant parameters for production use — get_recommended_discriminants","text":"Selection strategies: top_score: Simply returns n highest-scoring discriminants balanced: Prioritizes discriminants pass tests equally well, sorts overall score diverse: Uses k-means clustering normalized (,b,c) parameters ensure diverse parameter combinations, selecting best cluster fewer excellent discriminants exist requested, returns available warning.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/get_recommended_discriminants.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get recommended discriminant parameters for production use — get_recommended_discriminants","text":"\"diverse\" criteria requires least 3 discriminants uses k-means clustering seed=42 reproducibility.","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/reference/get_recommended_discriminants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get recommended discriminant parameters for production use — get_recommended_discriminants","text":"","code":"if (FALSE) { # \\dontrun{ # Get top 10 discriminants by score top10 <- get_recommended_discriminants(n = 10, criteria = \"top_score\")  # Get discriminants with balanced test performance balanced <- get_recommended_discriminants(n = 5, criteria = \"balanced\")  # Get diverse parameter combinations diverse <- get_recommended_discriminants(n = 20, criteria = \"diverse\") } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/get_validation_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Get validation configuration based on level — get_validation_config","title":"Get validation configuration based on level — get_validation_config","text":"Get validation configuration based level","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/get_validation_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get validation configuration based on level — get_validation_config","text":"","code":"get_validation_config(level)"},{"path":"https://biostochastics.github.io/qiprng/reference/get_validation_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get validation configuration based on level — get_validation_config","text":"level Validation level","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/get_validation_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get validation configuration based on level — get_validation_config","text":"Configuration list","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/init_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize cache directory — init_cache","title":"Initialize cache directory — init_cache","text":"Creates cache directory exist sets R.cache options.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/init_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize cache directory — init_cache","text":"","code":"init_cache(cache_dir = NULL, enabled = TRUE)"},{"path":"https://biostochastics.github.io/qiprng/reference/init_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize cache directory — init_cache","text":"cache_dir Directory cache storage enabled Whether caching enabled","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/init_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize cache directory — init_cache","text":"Invisible NULL","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/is_cache_enabled.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if caching is enabled — is_cache_enabled","title":"Check if caching is enabled — is_cache_enabled","text":"Check caching enabled","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/is_cache_enabled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if caching is enabled — is_cache_enabled","text":"","code":"is_cache_enabled()"},{"path":"https://biostochastics.github.io/qiprng/reference/is_cache_enabled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if caching is enabled — is_cache_enabled","text":"Logical indicating caching enabled","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/jumpAheadPRNG.html","id":null,"dir":"Reference","previous_headings":"","what":"Jump ahead in the PRNG sequence — jumpAheadPRNG","title":"Jump ahead in the PRNG sequence — jumpAheadPRNG","text":"Advances PRNG state skipping ahead n numbers using O(log n) matrix exponentiation MPFR precision arithmetic. exponentially efficient generating discarding n numbers, enabling astronomical jumps (e.g., 10^18 steps) microseconds.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/jumpAheadPRNG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jump ahead in the PRNG sequence — jumpAheadPRNG","text":"","code":"jumpAheadPRNG(n)"},{"path":"https://biostochastics.github.io/qiprng/reference/jumpAheadPRNG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jump ahead in the PRNG sequence — jumpAheadPRNG","text":"n Number steps jump ahead (positive integer numeric value). Can astronomically large (e.g., 1e18) implementation uses O(log n) matrix exponentiation optimal performance.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/jumpAheadPRNG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jump ahead in the PRNG sequence — jumpAheadPRNG","text":"Invisibly returns NULL","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/jumpAheadPRNG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Jump ahead in the PRNG sequence — jumpAheadPRNG","text":"jump-ahead functionality particularly useful : Parallel simulations different workers need non-overlapping sequences Subsampling specific points random sequence Skipping large segments without computational cost generation Creating independent streams separated astronomical distances Version 0.5.0 introduces revolutionary O(log n) complexity using: Matrix exponentiation binary powering algorithm Continued Fraction Expansion (CFE) period detection using Gauss-Legendre MPFR arbitrary precision arithmetic numerical stability Automatic optimization selection based jump size CFE period Performance characteristics: Small jumps (< 1000): Direct iteration Medium jumps (1000-1M): Block processing cache optimization Large jumps (> 1M): O(log n) matrix exponentiation Astronomical jumps (> 10^9): Pure logarithmic scaling Note: Due security-focused design random initialization, two PRNGs created identical parameters may start different positions sequence. jump-ahead function advances current position, fixed origin. Thread safety: function fully thread-safe block mutex acquired. implementation ensures proper synchronization thread-local storage jump-ahead operations.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/jumpAheadPRNG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jump ahead in the PRNG sequence — jumpAheadPRNG","text":"","code":"# Create default PRNG createPRNG()  # Generate some initial values initial_values <- generatePRNG(5)  # Jump ahead 1000 values jumpAheadPRNG(1000)  # Generate values after the jump after_jump_values <- generatePRNG(5)  # Large jumps are handled efficiently jumpAheadPRNG(1e6) # Jump ahead 1 million steps  # Use for parallel simulations if (FALSE) { # \\dontrun{ # Worker 1: uses steps 0-999999 createPRNG() worker1_values <- generatePRNG(1000000)  # Worker 2: uses steps 1000000-1999999 createPRNG() jumpAheadPRNG(1000000) worker2_values <- generatePRNG(1000000) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/load_discriminants.html","id":null,"dir":"Reference","previous_headings":"","what":"Load discriminants from CSV file — load_discriminants","title":"Load discriminants from CSV file — load_discriminants","text":"Loads discriminant parameters CSV file validates mathematical properties. function checks discriminants correctly calculated parameters meet required constraints quadratic irrational PRNG.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/load_discriminants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load discriminants from CSV file — load_discriminants","text":"","code":"load_discriminants(file_path = \"discriminants.csv\")"},{"path":"https://biostochastics.github.io/qiprng/reference/load_discriminants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load discriminants from CSV file — load_discriminants","text":"file_path Path discriminants.csv file (default: \"discriminants.csv\")","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/load_discriminants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load discriminants from CSV file — load_discriminants","text":"data frame containing discriminant parameters columns: Quadratic coefficient (must > 0) b Linear coefficient c Constant term (must < 0) Discriminant discriminant value b² - 4ac (must > 0)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/load_discriminants.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load discriminants from CSV file — load_discriminants","text":"function performs several validation checks: Verifies calculated discriminants match stored values Checks > 0 (required proper quadratic behavior) Checks c < 0 (required recurrence relation) Checks discriminant > 0 (required irrational roots)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/load_discriminants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load discriminants from CSV file — load_discriminants","text":"","code":"if (FALSE) { # \\dontrun{ # Load default discriminants file discriminants <- load_discriminants()  # Load from custom path discriminants <- load_discriminants(\"custom_discriminants.csv\") } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/load_excellent_discriminants.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and filter excellent discriminants from analysis results — load_excellent_discriminants","title":"Load and filter excellent discriminants from analysis results — load_excellent_discriminants","text":"Loads discriminant analysis results filters rated \"Excellent\" based comprehensive statistical testing. discriminants passed major randomness tests suitable production use.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/load_excellent_discriminants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and filter excellent discriminants from analysis results — load_excellent_discriminants","text":"","code":"load_excellent_discriminants(   results_file = \"discriminant_analysis_results/raw_results.rds\",   min_score = 0.85 )"},{"path":"https://biostochastics.github.io/qiprng/reference/load_excellent_discriminants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load and filter excellent discriminants from analysis results — load_excellent_discriminants","text":"results_file Path analysis results RDS file containing test results (default: \"discriminant_analysis_results/raw_results.rds\") min_score Minimum overall score threshold excellent discriminants (default: 0.85)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/load_excellent_discriminants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and filter excellent discriminants from analysis results — load_excellent_discriminants","text":"data frame containing excellent discriminants columns: Quadratic coefficient b Linear coefficient c Constant term discriminant discriminant value b² - 4ac overall_score Combined test score (0-1) quality_rating Quality classification (\"Excellent\") uniformity_passed Logical; uniformity test result independence_passed Logical; independence test result autocorrelation_passed Logical; autocorrelation test result periodicity_passed Logical; periodicity test result","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/load_excellent_discriminants.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load and filter excellent discriminants from analysis results — load_excellent_discriminants","text":"function filters discriminants : quality_rating == \"Excellent\" overall_score >= min_score (default 0.85) valid (non-NA) scores Results sorted overall_score descending order.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/load_excellent_discriminants.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Load and filter excellent discriminants from analysis results — load_excellent_discriminants","text":"Requires discriminant analysis run results saved. Run run_discriminant_analysis() first results file exist.","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/reference/load_excellent_discriminants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and filter excellent discriminants from analysis results — load_excellent_discriminants","text":"","code":"if (FALSE) { # \\dontrun{ # Load excellent discriminants excellent <- load_excellent_discriminants()  # Load with higher threshold top_excellent <- load_excellent_discriminants(min_score = 0.90) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/modifyList.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to modify lists — modifyList","title":"Helper function to modify lists — modifyList","text":"Helper function modify lists","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/modifyList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to modify lists — modifyList","text":"","code":"modifyList(x, val)"},{"path":"https://biostochastics.github.io/qiprng/reference/modifyList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to modify lists — modifyList","text":"x Base list val List modifications","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/modifyList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to modify lists — modifyList","text":"Modified list","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/monte_carlo_p_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo p-value calculation — monte_carlo_p_value","title":"Monte Carlo p-value calculation — monte_carlo_p_value","text":"Estimates p-values simulating null distribution test statistic using Monte Carlo methods. useful null distribution can simulated analytically derived.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/monte_carlo_p_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo p-value calculation — monte_carlo_p_value","text":"","code":"monte_carlo_p_value(   observed_stat,   null_simulator,   test_statistic,   n_simulations = 10000,   alternative = \"two.sided\",   progress = TRUE,   seed = NULL,   ... )"},{"path":"https://biostochastics.github.io/qiprng/reference/monte_carlo_p_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo p-value calculation — monte_carlo_p_value","text":"observed_stat observed test statistic null_simulator Function generates data null hypothesis test_statistic Function computes test statistic simulated data n_simulations Number Monte Carlo simulations (default: 10000) alternative Character string specifying alternative hypothesis progress Logical; show progress bar (default: TRUE) seed Random seed reproducibility (default: NULL) ... Additional arguments passed null_simulator","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/monte_carlo_p_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo p-value calculation — monte_carlo_p_value","text":"list containing: p.value Monte Carlo p-value simulated_stats Vector simulated test statistics observed_stat observed test statistic n_simulations Number simulations used","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/monte_carlo_p_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo p-value calculation — monte_carlo_p_value","text":"","code":"if (FALSE) { # \\dontrun{ # Test for correlation observed_cor <- cor(x, y) null_sim <- function(n) {   list(x = rnorm(n), y = rnorm(n)) } stat_func <- function(data) cor(data$x, data$y) result <- monte_carlo_p_value(observed_cor, null_sim, stat_func, n = 100) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/permutation_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation test for hypothesis testing — permutation_test","title":"Permutation test for hypothesis testing — permutation_test","text":"Performs permutation test assess significance test statistic comparing distribution statistic random permutations data.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/permutation_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation test for hypothesis testing — permutation_test","text":"","code":"permutation_test(   x,   y = NULL,   test_statistic,   n_permutations = 10000,   alternative = \"two.sided\",   progress = TRUE,   seed = NULL )"},{"path":"https://biostochastics.github.io/qiprng/reference/permutation_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation test for hypothesis testing — permutation_test","text":"x First sample full data vector y Second sample (two-sample tests) NULL (one-sample tests) test_statistic Function computes test statistic data n_permutations Number permutations (default: 10000) alternative Character string specifying alternative hypothesis progress Logical; show progress bar (default: TRUE) seed Random seed reproducibility (default: NULL)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/permutation_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutation test for hypothesis testing — permutation_test","text":"list containing: p.value permutation p-value permutation_stats Vector permutation test statistics observed_stat observed test statistic n_permutations Number permutations used","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/permutation_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutation test for hypothesis testing — permutation_test","text":"","code":"if (FALSE) { # \\dontrun{ # Two-sample test x <- rnorm(50, mean = 0) y <- rnorm(50, mean = 0.5) stat_func <- function(x, y) mean(x) - mean(y) result <- permutation_test(x, y, stat_func) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/print_excellent_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary of excellent discriminants analysis — print_excellent_summary","title":"Print summary of excellent discriminants analysis — print_excellent_summary","text":"Displays comprehensive summary excellent discriminants found analysis, including count, score ranges, test performance, parameter ranges, usage recommendations.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/print_excellent_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary of excellent discriminants analysis — print_excellent_summary","text":"","code":"print_excellent_summary(   results_file = \"discriminant_analysis_results/raw_results.rds\" )"},{"path":"https://biostochastics.github.io/qiprng/reference/print_excellent_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary of excellent discriminants analysis — print_excellent_summary","text":"results_file Path analysis results RDS file (default: \"discriminant_analysis_results/raw_results.rds\")","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/print_excellent_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary of excellent discriminants analysis — print_excellent_summary","text":"NULL (invisibly). Function called side effect printing formatted summary console.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/print_excellent_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print summary of excellent discriminants analysis — print_excellent_summary","text":"summary includes: Total count excellent discriminants Overall score range Test performance summary (pass rates test type) Parameter ranges (min/max , b, c, discriminant) Top 5 discriminants score Usage recommendations example function calls","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/print_excellent_summary.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Print summary of excellent discriminants analysis — print_excellent_summary","text":"function primarily interactive use quickly assess results discriminant analysis.","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/reference/print_excellent_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print summary of excellent discriminants analysis — print_excellent_summary","text":"","code":"if (FALSE) { # \\dontrun{ # Print summary of excellent discriminants print_excellent_summary()  # Print summary from custom results file print_excellent_summary(\"my_analysis/results.rds\") } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/print_validation_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Print validation summary — print_validation_summary","title":"Print validation summary — print_validation_summary","text":"Print validation summary","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/print_validation_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print validation summary — print_validation_summary","text":"","code":"print_validation_summary(report)"},{"path":"https://biostochastics.github.io/qiprng/reference/print_validation_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print validation summary — print_validation_summary","text":"report Validation report","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/profile_qiprng_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Profile different QIPRNG configurations — profile_qiprng_config","title":"Profile different QIPRNG configurations — profile_qiprng_config","text":"function profiles performance different QIPRNG configurations help users identify optimal settings specific use case.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/profile_qiprng_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Profile different QIPRNG configurations — profile_qiprng_config","text":"","code":"profile_qiprng_config(   config_list = list(     \"default\" = list(),     \"crypto\" = list(use_crypto_mixing = TRUE),     \"high_precision\" = list(mpfr_precision = 128),     \"normal\" = list(distribution = \"normal\")   ),   n = 10000,   repetitions = 10 )"},{"path":"https://biostochastics.github.io/qiprng/reference/profile_qiprng_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Profile different QIPRNG configurations — profile_qiprng_config","text":"config_list List named configurations test n Number random numbers generate test repetitions Number benchmark repetitions","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/profile_qiprng_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Profile different QIPRNG configurations — profile_qiprng_config","text":"data frame benchmark results configuration, including: config: Configuration name mean_time: Mean execution time milliseconds median_time: Median execution time milliseconds relative_speed: Performance relative default configuration","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/reference/profile_qiprng_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Profile different QIPRNG configurations — profile_qiprng_config","text":"","code":"if (FALSE) { # \\dontrun{ # Profile several QIPRNG configurations profiles <- profile_qiprng_config(   config_list = list(     \"default\" = list(),     \"crypto\" = list(use_crypto_mixing = TRUE),     \"high_precision\" = list(mpfr_precision = 128),     \"large_buffer\" = list(buffer_size = 10000)   ),   n = 5000,   repetitions = 3 )  # View the results print(profiles) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/qiprng-caching.html","id":null,"dir":"Reference","previous_headings":"","what":"Caching Framework for QIPRNG — qiprng-caching","title":"Caching Framework for QIPRNG — qiprng-caching","text":"Provides caching functionality computationally expensive operations using R.cache package. framework significantly improves performance repeated calculations data.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/qiprng-internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Package startup and shutdown functions — qiprng-internal","title":"Package startup and shutdown functions — qiprng-internal","text":"Internal functions managing QIPRNG package lifecycle. functions handle initialization cleanup package resources.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/qiprng-internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package startup and shutdown functions — qiprng-internal","text":"","code":".pkgenv"},{"path":"https://biostochastics.github.io/qiprng/reference/qiprng-internal.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Package startup and shutdown functions — qiprng-internal","text":"object class environment length 2.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/qiprng-testing.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistical Testing Framework for QPRNG — qiprng-testing","title":"Statistical Testing Framework for QPRNG — qiprng-testing","text":"comprehensive framework statistically testing quality random number generators. module provides various test suites, visualizations, reporting capabilities assess PRNG performance.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/qiprng-testing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Statistical Testing Framework for QPRNG — qiprng-testing","text":"framework includes: Basic distribution tests (uniformity, normality) Runs independence tests Correlation tests (serial correlation, autocorrelation) Binary bitwise tests Classical PRNG tests (chi-squared, Kolmogorov-Smirnov) Compression-based tests Optional integration external test batteries tests designed appropriate thresholds reliability across different environments, including multi-threaded contexts.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/qiprng.html","id":null,"dir":"Reference","previous_headings":"","what":"Quadratic Irrational PRNG Package — qiprng","title":"Quadratic Irrational PRNG Package — qiprng","text":"Provides high-quality, thread-safe pseudo-random number generator based quadratic irrationals optional cryptographic mixing.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/qiprng.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quadratic Irrational PRNG Package — qiprng","text":"QIPRNG package implements high-precision pseudo-random number generator based mathematical properties quadratic irrational numbers. features: Multiple probability distributions (uniform, normal, exponential, etc.) Optional cryptographic mixing enhanced security Deterministic/reproducible mode seed support (v0.2.7) Thread-safe implementation mutex protection thread-local storage Configurable precision using MPFR Jump-ahead capability efficient sequence advancement Automatic reseeding enhanced statistical quality Buffer management performance optimization Key functions: createPRNG: Initialize new PRNG specified configuration generatePRNG: Generate random numbers current configuration updatePRNG: Update PRNG configuration (change distribution, etc.) reseedPRNG: Force manual reseed PRNG jumpAheadPRNG: Advance PRNG sequence efficiently cleanupPRNG: Clean PRNG resources finished","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/reference/qiprng.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quadratic Irrational PRNG Package — qiprng","text":"Sergey Kornilov","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/qiprng_cache_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cache statistics — qiprng_cache_stats","title":"Get cache statistics — qiprng_cache_stats","text":"Returns information cache usage performance.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/qiprng_cache_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cache statistics — qiprng_cache_stats","text":"","code":"qiprng_cache_stats()"},{"path":"https://biostochastics.github.io/qiprng/reference/qiprng_cache_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cache statistics — qiprng_cache_stats","text":"List cache statistics","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/reseedPRNG.html","id":null,"dir":"Reference","previous_headings":"","what":"Reseed the PRNG — reseedPRNG","title":"Reseed the PRNG — reseedPRNG","text":"Forces manual reseed global PRNG instance. operation introduces additional entropy generator, can useful security-sensitive applications ensure sequence independence different parts simulation.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/reseedPRNG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reseed the PRNG — reseedPRNG","text":"","code":"reseedPRNG()"},{"path":"https://biostochastics.github.io/qiprng/reference/reseedPRNG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reseed the PRNG — reseedPRNG","text":"Invisibly returns NULL","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/reseedPRNG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reseed the PRNG — reseedPRNG","text":"Thread safety: function fully thread-safe block mutex acquired. implementation ensures thread-local resources properly handled reseeding.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/reseedPRNG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reseed the PRNG — reseedPRNG","text":"","code":"# Create default PRNG createPRNG()  # Generate some values generatePRNG(10) #>  [1] 0.7086016 0.4408572 0.5403513 0.7263212 0.3770454 0.8213059 0.2840821 #>  [8] 0.0660128 0.8452084 0.4694251  # Force a reseed reseedPRNG()  # Generate more values (new sequence after reseed) generatePRNG(10) #>  [1] 0.45325990 0.48541830 0.81262216 0.56530905 0.86266076 0.18496788 #>  [7] 0.08125108 0.17063390 0.60963185 0.13165985"},{"path":"https://biostochastics.github.io/qiprng/reference/run_advanced_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Comprehensive advanced test suite — run_advanced_tests","title":"Comprehensive advanced test suite — run_advanced_tests","text":"Runs advanced statistical tests set random samples, including entropy, gap, serial correlation, poker tests. test evaluates different aspects randomness quality.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/run_advanced_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comprehensive advanced test suite — run_advanced_tests","text":"","code":"run_advanced_tests(samples)"},{"path":"https://biostochastics.github.io/qiprng/reference/run_advanced_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comprehensive advanced test suite — run_advanced_tests","text":"samples Numeric vector random samples test (values 0,1)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/run_advanced_tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comprehensive advanced test suite — run_advanced_tests","text":"list containing results advanced tests: entropy Results Shannon entropy test gaps Results gap test serial_correlation Results serial correlation test poker Results poker test test result includes test_name, passed status, interpretation. Failed tests include error messages interpretation field.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/run_advanced_tests.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Comprehensive advanced test suite — run_advanced_tests","text":"function serves comprehensive test battery advanced randomness evaluation. runs following tests: Shannon Entropy Test: Measures information content unpredictability. High entropy indicates good randomness. Gap Test: Analyzes spacing values range. Tests gaps follow expected geometric distribution. Serial Correlation Test: Checks dependencies values various lags. Low correlation indicates independence. Poker Test: Examines digit patterns groups. Tests patterns match theoretical probabilities. tests include error handling ensure suite completes even individual tests fail. Failed tests return error message interpretation field.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/run_advanced_tests.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Comprehensive advanced test suite — run_advanced_tests","text":"best results, provide least 10,000 samples. Smaller sample sizes may lead inconclusive results tests.","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/reference/run_advanced_tests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comprehensive advanced test suite — run_advanced_tests","text":"","code":"if (FALSE) { # \\dontrun{ # Run all advanced tests on uniform random data samples <- runif(50000) results <- run_advanced_tests(samples)  # Check which tests passed lapply(results, function(test) {   paste(test$test_name, \"-\", test$result) })  # Run tests on PRNG output library(qiprng) createPRNG() samples <- generatePRNG(50000) results <- run_advanced_tests(samples) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/run_complete_analysis_with_quarto.html","id":null,"dir":"Reference","previous_headings":"","what":"Run complete analysis with Quarto reporting — run_complete_analysis_with_quarto","title":"Run complete analysis with Quarto reporting — run_complete_analysis_with_quarto","text":"Run complete analysis Quarto reporting","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/run_complete_analysis_with_quarto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run complete analysis with Quarto reporting — run_complete_analysis_with_quarto","text":"","code":"run_complete_analysis_with_quarto(   discriminants_file = \"discriminants.csv\",   sample_size = 10000,   max_discriminants = NULL,   output_name = \"discriminant_analysis_report\" )"},{"path":"https://biostochastics.github.io/qiprng/reference/run_complete_analysis_with_quarto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run complete analysis with Quarto reporting — run_complete_analysis_with_quarto","text":"discriminants_file Path discriminants CSV sample_size Sample size per discriminant max_discriminants Maximum discriminants test (NULL ) output_name Output file name prefix","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/run_complete_analysis_with_quarto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run complete analysis with Quarto reporting — run_complete_analysis_with_quarto","text":"Complete analysis results report","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/run_discriminant_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Run tests on all discriminants and generate report (Parallel Implementation) — run_discriminant_analysis","title":"Run tests on all discriminants and generate report (Parallel Implementation) — run_discriminant_analysis","text":"Performs comprehensive statistical testing multiple discriminants using parallel processing efficiency. Tests discriminant full battery randomness tests compiles results.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/run_discriminant_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run tests on all discriminants and generate report (Parallel Implementation) — run_discriminant_analysis","text":"","code":"run_discriminant_analysis(   discriminants_file = \"discriminants.csv\",   sample_size = 50000,   max_discriminants = NULL,   n_cores = NULL,   chunk_size = 50 )"},{"path":"https://biostochastics.github.io/qiprng/reference/run_discriminant_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run tests on all discriminants and generate report (Parallel Implementation) — run_discriminant_analysis","text":"discriminants_file Path discriminants CSV file (default: \"discriminants.csv\") sample_size Number samples generate per discriminant (default: 50000) max_discriminants Maximum number discriminants test, NULL (default: NULL) n_cores Number CPU cores use parallel processing (default: auto-detect - 3) chunk_size Number discriminants per parallel chunk progress tracking (default: 50)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/run_discriminant_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run tests on all discriminants and generate report (Parallel Implementation) — run_discriminant_analysis","text":"list containing test results discriminants. element contains: index Index discriminant input file parameters Discriminant parameters (, b, c, discriminant) sample_size Number samples tested uniformity Uniformity test results independence Independence test results autocorrelation Autocorrelation test results moments Moment analysis results periodicity Periodicity test results advanced Advanced test results overall_score Combined score (0-1) quality_rating Quality classification error Error message test failed","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/run_discriminant_analysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run tests on all discriminants and generate report (Parallel Implementation) — run_discriminant_analysis","text":"function uses parallel processing efficiently test multiple discriminants: Automatically detects available CPU cores Processes discriminants chunks memory efficiency Provides progress updates execution Includes timeout protection (300s default + dynamic adjustment) Handles errors gracefully without stopping entire analysis Runtime estimation provided based sample size: ≤50,000 samples: ~15 seconds per discriminant ≤100,000 samples: ~25 seconds per discriminant >100,000 samples: ~0.00025 * sample_size seconds","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/run_discriminant_analysis.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Run tests on all discriminants and generate report (Parallel Implementation) — run_discriminant_analysis","text":"function requires 'parallel' package. worker process loads required libraries independently. Memory cleared chunks prevent overflow large analyses.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/run_discriminant_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run tests on all discriminants and generate report (Parallel Implementation) — run_discriminant_analysis","text":"","code":"if (FALSE) { # \\dontrun{ # Test first 10 discriminants with default settings results <- run_discriminant_analysis(max_discriminants = 10)  # Test all discriminants with custom settings results <- run_discriminant_analysis(   sample_size = 100000,   n_cores = 8,   chunk_size = 100 )  # Analyze results excellent <- sapply(results, function(r) r$quality_rating == \"Excellent\") cat(\"Excellent discriminants:\", sum(excellent), \"\\n\") } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/run_prng_test_suite.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the PRNG test suite — run_prng_test_suite","title":"Run the PRNG test suite — run_prng_test_suite","text":"Executes comprehensive suite statistical tests PRNG function. function runs tests defined test suite collects results. Tests can include uniformity, randomness, independence, statistical properties depending suite configuration.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/run_prng_test_suite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the PRNG test suite — run_prng_test_suite","text":"","code":"run_prng_test_suite(suite, save_report = TRUE)"},{"path":"https://biostochastics.github.io/qiprng/reference/run_prng_test_suite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the PRNG test suite — run_prng_test_suite","text":"suite test suite created create_prng_test_suite save_report Whether save comprehensive HTML/PDF report visualizations","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/run_prng_test_suite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the PRNG test suite — run_prng_test_suite","text":"updated test suite results, including test statistics, p-values, pass/fail results, visualization data","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/run_prng_test_suite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run the PRNG test suite — run_prng_test_suite","text":"","code":"if (FALSE) { # \\dontrun{ # Create and run a test suite for qiprng createPRNG() # Initialize with defaults suite <- create_prng_test_suite(function(n) generatePRNG(n)) results <- run_prng_test_suite(suite)  # Create and run a more compact test suite with smaller sample sizes compact_config <- default_test_config compact_config$basic_sample_size <- 1e4 compact_config$classical_sample_size <- 1e4 suite <- create_prng_test_suite(   function(n) generatePRNG(n),   config = compact_config,   categories = c(\"basic\", \"classical\") ) results <- run_prng_test_suite(suite, save_report = FALSE) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/save_analysis_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Save all reports and visualizations — save_analysis_results","title":"Save all reports and visualizations — save_analysis_results","text":"Save reports visualizations","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/save_analysis_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save all reports and visualizations — save_analysis_results","text":"","code":"save_analysis_results(results, output_dir = \"discriminant_analysis_results\")"},{"path":"https://biostochastics.github.io/qiprng/reference/save_analysis_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save all reports and visualizations — save_analysis_results","text":"results List test results output_dir Directory save outputs","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/save_test_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a comprehensive test report — save_test_report","title":"Save a comprehensive test report — save_test_report","text":"Save comprehensive test report","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/save_test_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a comprehensive test report — save_test_report","text":"","code":"save_test_report(suite, filename = NULL)"},{"path":"https://biostochastics.github.io/qiprng/reference/save_test_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a comprehensive test report — save_test_report","text":"suite test suite results filename Optional filename report","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/save_test_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a comprehensive test report — save_test_report","text":"path saved report (invisibly)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/set_cache_enabled.html","id":null,"dir":"Reference","previous_headings":"","what":"Enable or disable caching — set_cache_enabled","title":"Enable or disable caching — set_cache_enabled","text":"Enable disable caching","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/set_cache_enabled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enable or disable caching — set_cache_enabled","text":"","code":"set_cache_enabled(enabled = TRUE)"},{"path":"https://biostochastics.github.io/qiprng/reference/set_cache_enabled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enable or disable caching — set_cache_enabled","text":"enabled Logical indicating whether enable caching","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/set_cache_enabled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enable or disable caching — set_cache_enabled","text":"Previous cache state (invisible)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/set_cache_ttl.html","id":null,"dir":"Reference","previous_headings":"","what":"Set cache TTL (Time To Live) — set_cache_ttl","title":"Set cache TTL (Time To Live) — set_cache_ttl","text":"Configure long cached results kept expiration.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/set_cache_ttl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set cache TTL (Time To Live) — set_cache_ttl","text":"","code":"set_cache_ttl(hours = 24)"},{"path":"https://biostochastics.github.io/qiprng/reference/set_cache_ttl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set cache TTL (Time To Live) — set_cache_ttl","text":"hours Number hours cache entries expire","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/set_cache_ttl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set cache TTL (Time To Live) — set_cache_ttl","text":"Invisible NULL","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/summarize_test_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a summary of test results — summarize_test_results","title":"Generate a summary of test results — summarize_test_results","text":"Generate summary test results","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/summarize_test_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a summary of test results — summarize_test_results","text":"","code":"summarize_test_results(suite)"},{"path":"https://biostochastics.github.io/qiprng/reference/summarize_test_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a summary of test results — summarize_test_results","text":"suite test suite results","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/summarize_test_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a summary of test results — summarize_test_results","text":"test suite summary added","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/suppressMPFRWarnings.html","id":null,"dir":"Reference","previous_headings":"","what":"Control MPFR warning messages — suppressMPFRWarnings","title":"Control MPFR warning messages — suppressMPFRWarnings","text":"Enables disables warnings inexact results MPFR operations. inexact results normal expected MPFR operations, especially irrational numbers square roots. function lets control whether warnings shown.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/suppressMPFRWarnings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control MPFR warning messages — suppressMPFRWarnings","text":"","code":"suppressMPFRWarnings(suppress = TRUE)"},{"path":"https://biostochastics.github.io/qiprng/reference/suppressMPFRWarnings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control MPFR warning messages — suppressMPFRWarnings","text":"suppress Logical: TRUE suppress warnings, FALSE show ","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/suppressMPFRWarnings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control MPFR warning messages — suppressMPFRWarnings","text":"previous setting (invisibly)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/suppressMPFRWarnings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control MPFR warning messages — suppressMPFRWarnings","text":"","code":"# Suppress MPFR warnings suppressMPFRWarnings(TRUE)  # Create PRNG with high precision createPRNG(list(mpfr_precision = 256L))  # Generate values without warnings values <- generatePRNG(10)  # Re-enable warnings if needed suppressMPFRWarnings(FALSE)"},{"path":"https://biostochastics.github.io/qiprng/reference/test_autocorrelation.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for autocorrelation — test_autocorrelation","title":"Test for autocorrelation — test_autocorrelation","text":"Performs comprehensive autocorrelation testing using statistical significance bounds empirical thresholds. enhanced test designed detect even subtle autocorrelation patterns might affect PRNG quality.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_autocorrelation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for autocorrelation — test_autocorrelation","text":"","code":"test_autocorrelation(samples, max_lag = 50)"},{"path":"https://biostochastics.github.io/qiprng/reference/test_autocorrelation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for autocorrelation — test_autocorrelation","text":"samples Numeric vector random samples test max_lag Maximum lag test (default: 50)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_autocorrelation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for autocorrelation — test_autocorrelation","text":"list containing test results: test_name Name test autocorrelations Vector autocorrelation values lag significant_lags Lags autocorrelation exceeds threshold n_sig_lags Number significant lags max_abs_acf Maximum absolute autocorrelation value threshold_used Final threshold used significance stat_bound Statistical significance bound (99% confidence) empirical_threshold Empirical threshold analysis passed Logical; TRUE significant autocorrelations interpretation Human-readable interpretation","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_autocorrelation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test for autocorrelation — test_autocorrelation","text":"test uses two thresholds: Statistical bound: 99% confidence interval = 2.576/sqrt(n) Empirical threshold: 0.010 (based comprehensive discriminant analysis) stricter two thresholds used ensure rigorous testing. approach helps identify high-quality PRNGs show minimal autocorrelation across lags.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_autocorrelation.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Test for autocorrelation — test_autocorrelation","text":"empirical threshold 0.010 determined extensive testing discriminants represents practical limit cryptographic-quality randomness.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_autocorrelation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for autocorrelation — test_autocorrelation","text":"","code":"if (FALSE) { # \\dontrun{ # Test autocorrelation samples <- runif(10000) result <- test_autocorrelation(samples, max_lag = 30) print(paste(\"Max |ACF|:\", round(result$max_abs_acf, 4))) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/test_cache_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get test cache statistics — test_cache_stats","title":"Get test cache statistics — test_cache_stats","text":"Returns information cached test results category.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_cache_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get test cache statistics — test_cache_stats","text":"","code":"test_cache_stats()"},{"path":"https://biostochastics.github.io/qiprng/reference/test_cache_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get test cache statistics — test_cache_stats","text":"Data frame cache statistics category","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_discriminant.html","id":null,"dir":"Reference","previous_headings":"","what":"Comprehensive test suite for a single discriminant — test_discriminant","title":"Comprehensive test suite for a single discriminant — test_discriminant","text":"Runs complete battery statistical tests random numbers generated specific discriminant parameters. Includes uniformity, independence, autocorrelation, moment analysis, periodicity, advanced tests.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_discriminant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comprehensive test suite for a single discriminant — test_discriminant","text":"","code":"test_discriminant(a, b, c, discriminant, n = 50000)"},{"path":"https://biostochastics.github.io/qiprng/reference/test_discriminant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comprehensive test suite for a single discriminant — test_discriminant","text":"Quadratic coefficient (must > 0) b Linear coefficient c Constant term (must < 0) discriminant discriminant value b² - 4ac n Number samples generate (default: 50000)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_discriminant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comprehensive test suite for a single discriminant — test_discriminant","text":"comprehensive list containing: parameters List input parameters (, b, c, discriminant) sample_size Number samples generated uniformity Results uniformity tests independence Results independence test autocorrelation Results autocorrelation test moments Results moment analysis periodicity Results periodicity tests advanced Results advanced test suite overall_score Weighted score (0-1) combining tests quality_rating Rating: \"Excellent\", \"-Good\", \"Good\", \"Fair\", \"Poor\", \"Error\"","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_discriminant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Comprehensive test suite for a single discriminant — test_discriminant","text":"function calculates weighted overall score using: Uniformity: 20% weight Independence: 20% weight Autocorrelation: 25% weight (higher due importance) Periodicity: 20% weight Advanced tests: 15% weight Quality ratings assigned based overall score: Excellent: score ≥ 0.85 -Good: 0.75 ≤ score < 0.85 Good: 0.60 ≤ score < 0.75 Fair: 0.45 ≤ score < 0.60 Poor: score < 0.45","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_discriminant.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Comprehensive test suite for a single discriminant — test_discriminant","text":"function includes comprehensive error handling. test fails, returns partial results appropriate error messages.","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/reference/test_discriminant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comprehensive test suite for a single discriminant — test_discriminant","text":"","code":"if (FALSE) { # \\dontrun{ # Test a specific discriminant result <- test_discriminant(a = 2, b = 5, c = -2, discriminant = 41, n = 10000) print(paste(\"Quality:\", result$quality_rating)) print(paste(\"Score:\", round(result$overall_score, 3))) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/test_entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Shannon entropy test — test_entropy","title":"Shannon entropy test — test_entropy","text":"Tests information content random sequence using Shannon entropy. High entropy indicates good randomness, low entropy suggests patterns predictability data.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shannon entropy test — test_entropy","text":"","code":"test_entropy(samples, bins = 256)"},{"path":"https://biostochastics.github.io/qiprng/reference/test_entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shannon entropy test — test_entropy","text":"samples Numeric vector random samples test bins Number bins discretization (default: 256)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shannon entropy test — test_entropy","text":"list containing entropy test results: test_name Name test shannon_entropy Calculated Shannon entropy bits max_entropy Maximum possible entropy given bin count normalized_entropy Ratio observed maximum entropy (0-1) passed Logical; TRUE normalized entropy > 0.95 interpretation Human-readable interpretation results","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_entropy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shannon entropy test — test_entropy","text":"Shannon entropy calculated : $$H = -\\sum_{=1}^{n} p_i \\log_2(p_i)$$ p_i probability bin . samples discretized specified number bins, entropy calculated resulting frequency distribution. perfectly uniform distribution, entropy equals log2(bins). test passes normalized entropy (H/H_max) exceeds 0.95, indicating high randomness.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_entropy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Shannon entropy test — test_entropy","text":"choice bin count affects test sensitivity. bins may miss fine-grained patterns, many bins may lead sparse data issues.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_entropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shannon entropy test — test_entropy","text":"","code":"if (FALSE) { # \\dontrun{ # Test entropy of uniform random numbers samples <- runif(10000) result <- test_entropy(samples) print(paste(\"Normalized entropy:\", round(result$normalized_entropy, 4)))  # Test with fewer bins result <- test_entropy(samples, bins = 128) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/test_gaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Gap test for randomness — test_gaps","title":"Gap test for randomness — test_gaps","text":"Tests distribution gaps occurrences values specified range. test analyzes far apart values within alpha, beta appear sequence, follow geometric distribution truly random data.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_gaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gap test for randomness — test_gaps","text":"","code":"test_gaps(samples, alpha = 0.3, beta = 0.7)"},{"path":"https://biostochastics.github.io/qiprng/reference/test_gaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gap test for randomness — test_gaps","text":"samples Numeric vector random samples test alpha Lower bound gap range (default: 0.3) beta Upper bound gap range (default: 0.7)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_gaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gap test for randomness — test_gaps","text":"list containing gap test results: test_name Name test statistic Chi-squared test statistic p_value P-value chi-squared test passed Logical; TRUE p-value > 0.05 gaps_analyzed Number gaps found analyzed interpretation Human-readable interpretation results","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_gaps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gap test for randomness — test_gaps","text":"gap test examines distances consecutive occurrences values within range alpha, beta. uniform random sequence, gaps follow geometric distribution parameter p = beta - alpha. test procedure: Identifies positions samples fall within alpha, beta Calculates gaps consecutive positions Compares observed gap distribution expected geometric distribution Uses chi-squared test assess goodness--fit expected frequency gap length k : $$E[k] = n \\cdot (1-p)^{k-1} \\cdot p$$ n number gaps p = beta - alpha.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_gaps.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Gap test for randomness — test_gaps","text":"test requires least 10 gaps reliable results. fewer gaps found, test returns INCONCLUSIVE.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_gaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gap test for randomness — test_gaps","text":"","code":"if (FALSE) { # \\dontrun{ # Test gaps in uniform random numbers samples <- runif(10000) result <- test_gaps(samples) print(paste(\"Gap test p-value:\", round(result$p_value, 4)))  # Test with different range result <- test_gaps(samples, alpha = 0.2, beta = 0.8) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/test_independence.html","id":null,"dir":"Reference","previous_headings":"","what":"Test independence using runs test — test_independence","title":"Test independence using runs test — test_independence","text":"Tests independence sequence random numbers analyzing runs median. run consecutive sequence values median.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_independence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test independence using runs test — test_independence","text":"","code":"test_independence(samples)"},{"path":"https://biostochastics.github.io/qiprng/reference/test_independence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test independence using runs test — test_independence","text":"samples Numeric vector random samples test","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_independence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test independence using runs test — test_independence","text":"list containing test results: test_name Name test statistic Z-score test statistic p_value Two-tailed p-value passed Logical; TRUE p-value > 0.05 interpretation Human-readable interpretation","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_independence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test independence using runs test — test_independence","text":"runs test converts sequence binary (/median) counts number runs. independence, number runs follows approximately normal distribution : Expected runs: ER = (2 * n1 * n0) / n + 1 Variance: VarR = (2 * n1 * n0 * (2 * n1 * n0 - n)) / (n² * (n - 1)) n1 = count median, n0 = count median, n = total count.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_independence.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Test independence using runs test — test_independence","text":"sequence zero variance runs (e.g., values median) definitively non-random return p-value = 0.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_independence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test independence using runs test — test_independence","text":"","code":"if (FALSE) { # \\dontrun{ # Test independence of random sequence samples <- runif(1000) result <- test_independence(samples) print(result$interpretation) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/test_moments.html","id":null,"dir":"Reference","previous_headings":"","what":"Test statistical moments (mean, variance, skewness, kurtosis) — test_moments","title":"Test statistical moments (mean, variance, skewness, kurtosis) — test_moments","text":"Analyzes first four statistical moments sample compares theoretical values expected uniform0,1 distribution.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_moments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test statistical moments (mean, variance, skewness, kurtosis) — test_moments","text":"","code":"test_moments(samples)"},{"path":"https://biostochastics.github.io/qiprng/reference/test_moments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test statistical moments (mean, variance, skewness, kurtosis) — test_moments","text":"samples Numeric vector random samples test","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_moments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test statistical moments (mean, variance, skewness, kurtosis) — test_moments","text":"list containing moment analysis results: test_name Name test sample_mean Calculated sample mean sample_variance Calculated sample variance sample_skewness Calculated sample skewness sample_kurtosis Calculated sample kurtosis (non-excess) expected_mean Expected mean uniform0,1 = 0.5 expected_variance Expected variance uniform0,1 = 1/12 expected_skewness Expected skewness uniform0,1 = 0 expected_kurtosis Expected kurtosis uniform0,1 = 1.8 mean_error Absolute deviation expected mean var_error Absolute deviation expected variance skew_error Absolute deviation expected skewness kurt_error Absolute deviation expected kurtosis","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_moments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test statistical moments (mean, variance, skewness, kurtosis) — test_moments","text":"uniform distribution 0,1, theoretical moments : Mean: μ = 0.5 Variance: σ² = 1/12 ≈ 0.0833 Skewness: γ₁ = 0 (symmetric distribution) Kurtosis: γ₂ = 1.8 (platykurtic, flatter normal) function uses non-excess kurtosis (normal distribution = 3).","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_moments.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Test statistical moments (mean, variance, skewness, kurtosis) — test_moments","text":"function provides descriptive statistics . hypothesis testing moments, additional tests needed determine deviations statistically significant.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_moments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test statistical moments (mean, variance, skewness, kurtosis) — test_moments","text":"","code":"if (FALSE) { # \\dontrun{ # Analyze moments of uniform random numbers samples <- runif(10000) moments <- test_moments(samples) print(paste(\"Mean error:\", round(moments$mean_error, 4))) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/test_periodicity.html","id":null,"dir":"Reference","previous_headings":"","what":"Enhanced periodicity testing using multiple spectral methods — test_periodicity","title":"Enhanced periodicity testing using multiple spectral methods — test_periodicity","text":"Performs comprehensive periodicity pattern detection using multiple statistical tests including Fisher's g-test, Bartels rank test, Cox-Stuart test, turning points test, Ljung-Box test.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_periodicity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enhanced periodicity testing using multiple spectral methods — test_periodicity","text":"","code":"test_periodicity(samples)"},{"path":"https://biostochastics.github.io/qiprng/reference/test_periodicity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enhanced periodicity testing using multiple spectral methods — test_periodicity","text":"samples Numeric vector random samples test","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_periodicity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enhanced periodicity testing using multiple spectral methods — test_periodicity","text":"list containing comprehensive periodicity test results: test_name Name test suite fisher_g_stat Fisher's g-statistic hidden periodicities fisher_p_value P-value Fisher's g-test bartels_p_value P-value Bartels rank test cox_stuart_p_value P-value Cox-Stuart trend test turning_points_p_value P-value turning points test ljung_box_p_value P-value Ljung-Box test combined_p_value Mean valid p-values passed Logical; TRUE majority tests pass tests_passed String showing number tests passed interpretation Human-readable interpretation","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_periodicity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Enhanced periodicity testing using multiple spectral methods — test_periodicity","text":"function combines multiple tests detect various types patterns: Fisher's g-test: Detects hidden periodicities frequency domain Bartels rank test: Tests randomness using rank-based methods Cox-Stuart test: Detects monotonic trends Turning points test: Analyzes local extrema patterns Ljung-Box test: Tests serial correlation lag 20 overall assessment passes majority individual tests pass (p-value > 0.05). ensemble approach provides robust detection various non-random patterns.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_periodicity.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Enhanced periodicity testing using multiple spectral methods — test_periodicity","text":"tests may fail NA p-values sample size small required packages available. overall assessment uses valid test results.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_periodicity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enhanced periodicity testing using multiple spectral methods — test_periodicity","text":"","code":"if (FALSE) { # \\dontrun{ # Test for periodicity samples <- runif(5000) result <- test_periodicity(samples) print(result$interpretation) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/test_poker.html","id":null,"dir":"Reference","previous_headings":"","what":"Poker test for randomness — test_poker","title":"Poker test for randomness — test_poker","text":"Tests randomness examining patterns \"hands\" digits, similar poker hands. test converts continuous values digits checks distribution unique digits per hand matches theoretical expectations.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_poker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Poker test for randomness — test_poker","text":"","code":"test_poker(samples, m = 5)"},{"path":"https://biostochastics.github.io/qiprng/reference/test_poker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Poker test for randomness — test_poker","text":"samples Numeric vector random samples test (values 0,1) m Length hand digits (default: 5)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_poker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Poker test for randomness — test_poker","text":"list containing poker test results: test_name Name test statistic Chi-squared test statistic p_value P-value chi-squared test passed Logical; TRUE p-value > 0.05 hands_analyzed Number complete hands analyzed interpretation Human-readable interpretation results","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_poker.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Poker test for randomness — test_poker","text":"poker test inspired card game examines patterns groups digits: Converts sample digit (0-9) multiplying 10 flooring Groups consecutive digits \"hands\" size m Counts unique digits hand Compares observed distribution theoretical probabilities m=5 (default), theoretical probabilities : 1 unique digit (five kind): 0.0001 2 unique digits: 0.0045 3 unique digits: 0.0270 4 unique digits: 0.1080 5 unique digits (different): 0.3024 probabilities based multinomial distribution sampling replacement 10 digits.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_poker.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Poker test for randomness — test_poker","text":"test requires least 100 hands reliable results. hand sizes 5, simplified uniform probabilities used.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_poker.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Poker test for randomness — test_poker","text":"Knuth, D. E. (1997). Art Computer Programming, Volume 2: Seminumerical Algorithms (3rd ed.). Addison-Wesley.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_poker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Poker test for randomness — test_poker","text":"","code":"if (FALSE) { # \\dontrun{ # Standard poker test with 5-digit hands samples <- runif(10000) result <- test_poker(samples) print(paste(\"Poker test p-value:\", round(result$p_value, 4)))  # Test with 3-digit hands result <- test_poker(samples, m = 3) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/test_prng.html","id":null,"dir":"Reference","previous_headings":"","what":"Run statistical tests on the current PRNG configuration — test_prng","title":"Run statistical tests on the current PRNG configuration — test_prng","text":"Run statistical tests current PRNG configuration","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_prng.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run statistical tests on the current PRNG configuration — test_prng","text":"","code":"test_prng(   sample_size = 1e+06,   config = default_test_config,   categories = names(QPRNG_TEST_CATEGORIES),   report_file = NULL )"},{"path":"https://biostochastics.github.io/qiprng/reference/test_prng.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run statistical tests on the current PRNG configuration — test_prng","text":"sample_size Number random numbers generate testing config Test configuration (see default_test_config) categories Test categories include report_file Optional filename test report","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_prng.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run statistical tests on the current PRNG configuration — test_prng","text":"test suite object results","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_qiprng.html","id":null,"dir":"Reference","previous_headings":"","what":"Run statistical tests on the PRNG — test_qiprng","title":"Run statistical tests on the PRNG — test_qiprng","text":"function performs statistical tests PRNG output verify quality.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_qiprng.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run statistical tests on the PRNG — test_qiprng","text":"","code":"test_qiprng(n = 10000, cfg = NULL)"},{"path":"https://biostochastics.github.io/qiprng/reference/test_qiprng.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run statistical tests on the PRNG — test_qiprng","text":"n Number samples use tests (default: 10000) cfg Optional configuration use testing (default: NULL)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_qiprng.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run statistical tests on the PRNG — test_qiprng","text":"List containing test results: ks_pvalue: p-value Kolmogorov-Smirnov test uniformity runs_z_score: Z-score runs test independence spectral_sd: Standard deviation FFT components","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_qiprng.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run statistical tests on the PRNG — test_qiprng","text":"","code":"# Run tests with default configuration results <- test_qiprng() #> Error in test_qiprng(): could not find function \"test_qiprng\"  # Run tests with custom configuration cfg <- list(   a = 2L,   b = 0L,   c = -1L,   mpfr_precision = 53L,   use_crypto_mixing = TRUE,   buffer_size = 1024L ) results <- test_qiprng(10000, cfg) #> Error in test_qiprng(10000, cfg): could not find function \"test_qiprng\""},{"path":"https://biostochastics.github.io/qiprng/reference/test_serial_correlation.html","id":null,"dir":"Reference","previous_headings":"","what":"Serial correlation test at multiple lags — test_serial_correlation","title":"Serial correlation test at multiple lags — test_serial_correlation","text":"Tests serial correlation (autocorrelation) random sequence multiple lag values. test detects dependencies values separated various distances sequence.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_serial_correlation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serial correlation test at multiple lags — test_serial_correlation","text":"","code":"test_serial_correlation(samples, max_lag = 50)"},{"path":"https://biostochastics.github.io/qiprng/reference/test_serial_correlation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serial correlation test at multiple lags — test_serial_correlation","text":"samples Numeric vector random samples test max_lag Maximum lag test (default: 50)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_serial_correlation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Serial correlation test at multiple lags — test_serial_correlation","text":"list containing serial correlation test results: test_name Name test correlations Vector correlation coefficients lag p_values Vector p-values lag significant_lags Vector lag indices significant correlation num_significant Count lags significant correlation expected_significant Expected number significant lags chance passed Logical; TRUE num_significant <= expected_significant interpretation Human-readable interpretation results","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_serial_correlation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Serial correlation test at multiple lags — test_serial_correlation","text":"Serial correlation measures relationship values sequence lagged counterparts. truly random sequence, correlations lags near zero. lag k 1 max_lag, test: Computes Pearson correlation x1:(n-k) x(k+1):n Tests correlation significantly different zero Records correlations p-values test passes proportion significant correlations (p < 0.05) exceed 5%, expected false positive rate. High serial correlation indicates: Predictable patterns sequence Poor randomness quality Potential issues PRNG algorithm","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_serial_correlation.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Serial correlation test at multiple lags — test_serial_correlation","text":"Lags approaching sample size may unreliable results due reduced sample size correlation calculation.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_serial_correlation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Serial correlation test at multiple lags — test_serial_correlation","text":"","code":"if (FALSE) { # \\dontrun{ # Test serial correlation in uniform random numbers samples <- runif(10000) result <- test_serial_correlation(samples) print(paste(\"Significant correlations found:\", result$num_significant))  # Test with more lags result <- test_serial_correlation(samples, max_lag = 100)  # Plot correlation values plot(result$correlations,   type = \"h\",   main = \"Serial Correlations by Lag\",   xlab = \"Lag\", ylab = \"Correlation\" ) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/test_uniformity.html","id":null,"dir":"Reference","previous_headings":"","what":"Test uniformity using Kolmogorov-Smirnov and Chi-squared tests — test_uniformity","title":"Test uniformity using Kolmogorov-Smirnov and Chi-squared tests — test_uniformity","text":"Performs comprehensive uniformity testing sample random numbers using Kolmogorov-Smirnov test Chi-squared goodness--fit test.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_uniformity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test uniformity using Kolmogorov-Smirnov and Chi-squared tests — test_uniformity","text":"","code":"test_uniformity(samples, bins = 20)"},{"path":"https://biostochastics.github.io/qiprng/reference/test_uniformity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test uniformity using Kolmogorov-Smirnov and Chi-squared tests — test_uniformity","text":"samples Numeric vector random samples test bins Number bins Chi-squared test (default: 20)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_uniformity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test uniformity using Kolmogorov-Smirnov and Chi-squared tests — test_uniformity","text":"list containing test results: test_name Name test suite ks_statistic Kolmogorov-Smirnov test statistic ks_p_value Kolmogorov-Smirnov p-value chi_sq_statistic Chi-squared test statistic chi_sq_p_value Chi-squared p-value passed Logical; TRUE tests pass 0.05 significance interpretation Human-readable interpretation results","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_uniformity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test uniformity using Kolmogorov-Smirnov and Chi-squared tests — test_uniformity","text":"function performs two complementary tests: Kolmogorov-Smirnov test: Compares empirical CDF uniform0,1 Chi-squared test: Tests bin frequencies match expected uniform distribution warning issued expected bin counts less 5, may affect validity Chi-squared test.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_uniformity.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Test uniformity using Kolmogorov-Smirnov and Chi-squared tests — test_uniformity","text":"tests must pass (p-value > 0.05) overall test pass.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/test_uniformity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test uniformity using Kolmogorov-Smirnov and Chi-squared tests — test_uniformity","text":"","code":"if (FALSE) { # \\dontrun{ # Test uniform random numbers samples <- runif(10000) result <- test_uniformity(samples) print(result$interpretation) } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/updatePRNG.html","id":null,"dir":"Reference","previous_headings":"","what":"Update PRNG configuration — updatePRNG","title":"Update PRNG configuration — updatePRNG","text":"Updates configuration global PRNG instance new parameters. allows changing distribution type, parameters, settings existing PRNG without recreating .","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/updatePRNG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update PRNG configuration — updatePRNG","text":"","code":"updatePRNG(config)"},{"path":"https://biostochastics.github.io/qiprng/reference/updatePRNG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update PRNG configuration — updatePRNG","text":"config List new configuration parameters update. specified parameters changed; others retain current values.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/updatePRNG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update PRNG configuration — updatePRNG","text":"Invisibly returns NULL","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/updatePRNG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update PRNG configuration — updatePRNG","text":"Thread safety: function fully thread-safe block mutex acquired. switching distributions (e.g., uniform normal), implementation ensures clean transition proper buffer management reseeding.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/updatePRNG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update PRNG configuration — updatePRNG","text":"","code":"# Create default PRNG createPRNG()  # Generate some uniform numbers uniform_values <- generatePRNG(10)  # Switch to normal distribution updatePRNG(list(   distribution = \"normal\",   normal_mean = 5,   normal_sd = 2 ))  # Generate normal values normal_values <- generatePRNG(10)"},{"path":"https://biostochastics.github.io/qiprng/reference/validate_analysis_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate analysis results for completeness and correctness — validate_analysis_results","title":"Validate analysis results for completeness and correctness — validate_analysis_results","text":"Validate analysis results completeness correctness","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_analysis_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate analysis results for completeness and correctness — validate_analysis_results","text":"","code":"validate_analysis_results(results)"},{"path":"https://biostochastics.github.io/qiprng/reference/validate_analysis_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate analysis results for completeness and correctness — validate_analysis_results","text":"results List analysis results","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_analysis_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate analysis results for completeness and correctness — validate_analysis_results","text":"List validation status details","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_basic_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate basic tests — validate_basic_tests","title":"Validate basic tests — validate_basic_tests","text":"Validate basic tests","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_basic_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate basic tests — validate_basic_tests","text":"","code":"validate_basic_tests(config, verbose = TRUE)"},{"path":"https://biostochastics.github.io/qiprng/reference/validate_basic_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate basic tests — validate_basic_tests","text":"config Validation configuration verbose Print progress","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_basic_tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate basic tests — validate_basic_tests","text":"Validation results basic tests","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_binary_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate binary tests — validate_binary_tests","title":"Validate binary tests — validate_binary_tests","text":"Validate binary tests","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_binary_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate binary tests — validate_binary_tests","text":"","code":"validate_binary_tests(config, verbose = TRUE)"},{"path":"https://biostochastics.github.io/qiprng/reference/validate_binary_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate binary tests — validate_binary_tests","text":"config Validation configuration verbose Print progress","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_binary_tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate binary tests — validate_binary_tests","text":"Validation results binary tests","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_classical_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate classical tests — validate_classical_tests","title":"Validate classical tests — validate_classical_tests","text":"Validate classical tests","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_classical_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate classical tests — validate_classical_tests","text":"","code":"validate_classical_tests(config, verbose = TRUE)"},{"path":"https://biostochastics.github.io/qiprng/reference/validate_classical_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate classical tests — validate_classical_tests","text":"config Validation configuration verbose Print progress","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_classical_tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate classical tests — validate_classical_tests","text":"Validation results classical tests","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_compression_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate compression tests — validate_compression_tests","title":"Validate compression tests — validate_compression_tests","text":"Validate compression tests","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_compression_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate compression tests — validate_compression_tests","text":"","code":"validate_compression_tests(config, verbose = TRUE)"},{"path":"https://biostochastics.github.io/qiprng/reference/validate_compression_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate compression tests — validate_compression_tests","text":"config Validation configuration verbose Print progress","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_compression_tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate compression tests — validate_compression_tests","text":"Validation results compression tests","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate PRNG configuration — validate_config","title":"Validate PRNG configuration — validate_config","text":"Validates configuration parameters PRNG ensure meet requirements mathematical correctness numerical stability.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate PRNG configuration — validate_config","text":"","code":"validate_config(config)"},{"path":"https://biostochastics.github.io/qiprng/reference/validate_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate PRNG configuration — validate_config","text":"config List configuration parameters","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate PRNG configuration — validate_config","text":"TRUE valid, throws error otherwise detailed message","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_correlation_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate correlation tests — validate_correlation_tests","title":"Validate correlation tests — validate_correlation_tests","text":"Validate correlation tests","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_correlation_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate correlation tests — validate_correlation_tests","text":"","code":"validate_correlation_tests(config, verbose = TRUE)"},{"path":"https://biostochastics.github.io/qiprng/reference/validate_correlation_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate correlation tests — validate_correlation_tests","text":"config Validation configuration verbose Print progress","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_correlation_tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate correlation tests — validate_correlation_tests","text":"Validation results correlation tests","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_edge_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate edge cases — validate_edge_cases","title":"Validate edge cases — validate_edge_cases","text":"Validate edge cases","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_edge_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate edge cases — validate_edge_cases","text":"","code":"validate_edge_cases(config, verbose = TRUE)"},{"path":"https://biostochastics.github.io/qiprng/reference/validate_edge_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate edge cases — validate_edge_cases","text":"config Validation configuration verbose Print progress","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_edge_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate edge cases — validate_edge_cases","text":"Edge case validation results","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_external_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate external tests — validate_external_tests","title":"Validate external tests — validate_external_tests","text":"Validate external tests","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_external_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate external tests — validate_external_tests","text":"","code":"validate_external_tests(config, verbose = TRUE)"},{"path":"https://biostochastics.github.io/qiprng/reference/validate_external_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate external tests — validate_external_tests","text":"config Validation configuration verbose Print progress","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_external_tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate external tests — validate_external_tests","text":"Validation results external tests","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_multidim_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate multidimensional tests — validate_multidim_tests","title":"Validate multidimensional tests — validate_multidim_tests","text":"Validate multidimensional tests","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_multidim_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate multidimensional tests — validate_multidim_tests","text":"","code":"validate_multidim_tests(config, verbose = TRUE)"},{"path":"https://biostochastics.github.io/qiprng/reference/validate_multidim_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate multidimensional tests — validate_multidim_tests","text":"config Validation configuration verbose Print progress","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_multidim_tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate multidimensional tests — validate_multidim_tests","text":"Validation results multidimensional tests","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_outputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate final outputs for consistency — validate_outputs","title":"Validate final outputs for consistency — validate_outputs","text":"Validate final outputs consistency","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_outputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate final outputs for consistency — validate_outputs","text":"","code":"validate_outputs(summary_data, results)"},{"path":"https://biostochastics.github.io/qiprng/reference/validate_outputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate final outputs for consistency — validate_outputs","text":"summary_data Summary statistics data frame results Original results list","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_outputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate final outputs for consistency — validate_outputs","text":"List validation details","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate performance — validate_performance","title":"Validate performance — validate_performance","text":"Validate performance","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate performance — validate_performance","text":"","code":"validate_performance(config, verbose = TRUE)"},{"path":"https://biostochastics.github.io/qiprng/reference/validate_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate performance — validate_performance","text":"config Validation configuration verbose Print progress","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate performance — validate_performance","text":"Performance validation results","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_qiprng_framework.html","id":null,"dir":"Reference","previous_headings":"","what":"Master Validation Framework — validate_qiprng_framework","title":"Master Validation Framework — validate_qiprng_framework","text":"Runs comprehensive validation entire qiprng testing framework","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_qiprng_framework.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Master Validation Framework — validate_qiprng_framework","text":"","code":"validate_qiprng_framework(level = \"standard\", config = NULL, verbose = TRUE)"},{"path":"https://biostochastics.github.io/qiprng/reference/validate_qiprng_framework.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Master Validation Framework — validate_qiprng_framework","text":"level Validation level: \"quick\", \"standard\", \"comprehensive\" config Optional configuration list verbose Logical indicating whether print progress","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_qiprng_framework.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Master Validation Framework — validate_qiprng_framework","text":"Validation report object","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_runs_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate runs tests — validate_runs_tests","title":"Validate runs tests — validate_runs_tests","text":"Validate runs tests","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_runs_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate runs tests — validate_runs_tests","text":"","code":"validate_runs_tests(config, verbose = TRUE)"},{"path":"https://biostochastics.github.io/qiprng/reference/validate_runs_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate runs tests — validate_runs_tests","text":"config Validation configuration verbose Print progress","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_runs_tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate runs tests — validate_runs_tests","text":"Validation results runs tests","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_test_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate test result structure — validate_test_structure","title":"Validate test result structure — validate_test_structure","text":"Validate test result structure","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_test_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate test result structure — validate_test_structure","text":"","code":"validate_test_structure(test_result)"},{"path":"https://biostochastics.github.io/qiprng/reference/validate_test_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate test result structure — validate_test_structure","text":"test_result test result object","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validate_test_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate test result structure — validate_test_structure","text":"TRUE valid structure, FALSE otherwise","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validation_suite.html","id":null,"dir":"Reference","previous_headings":"","what":"Comprehensive Validation Suite for qiprng — validation_suite","title":"Comprehensive Validation Suite for qiprng — validation_suite","text":"module provides complete validation framework testing aspects qiprng statistical testing framework. includes validators test category, edge case testing, performance benchmarking, comprehensive reporting.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/validation_suite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comprehensive Validation Suite for qiprng — validation_suite","text":"","code":"source_test_files()"},{"path":"https://biostochastics.github.io/qiprng/reference/visualize_prng_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize PRNG test results — visualize_prng_tests","title":"Visualize PRNG test results — visualize_prng_tests","text":"function generates comprehensive visualizations statistical test results PRNG test suite. creates plots test category can optionally generate HTML report summarizing results.","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/visualize_prng_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize PRNG test results — visualize_prng_tests","text":"","code":"visualize_prng_tests(suite, create_report = TRUE)"},{"path":"https://biostochastics.github.io/qiprng/reference/visualize_prng_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize PRNG test results — visualize_prng_tests","text":"suite Test suite object returned run_prng_test_suite create_report Logical, whether create HTML report (default: TRUE)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/visualize_prng_tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize PRNG test results — visualize_prng_tests","text":"updated test suite object visualization paths report path (generated)","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/visualize_prng_tests.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize PRNG test results — visualize_prng_tests","text":"visualizations include: Basic Distribution Tests: Histogram generated random numbers QQ plot theoretical uniform distribution Empirical vs. theoretical CDF plot Chi-square residuals plot Runs Independence Tests: Sequence plot showing values sequence Lagged scatter plot (x[] vs x[+1]) Runs length distribution Gap distribution plots Correlation Tests: Autocorrelation function (ACF) plot Partial autocorrelation function (PACF) plot Spectrum analysis plot Binary Bitwise Tests: Bit frequency position bar chart Runs bits distribution Bit pattern frequency heatmap Classical Tests: Poker hand frequency distribution Coupon collection time distribution Birthday spacing distribution Compression Tests: Compression ratio comparison Entropy estimation plot External Tests: P-value summary external package tests QQ plot transformed data visualizations saved output directory specified test suite configuration, organized subdirectories test category.","code":""},{"path":[]},{"path":"https://biostochastics.github.io/qiprng/reference/visualize_prng_tests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize PRNG test results — visualize_prng_tests","text":"","code":"if (FALSE) { # \\dontrun{ # Run the test suite results <- run_prng_test_suite(   prng_func = function(n) generatePRNG(n),   config = list(     output_dir = \"qiprng_test_results\"   ) )  # Generate visualizations results <- visualize_prng_tests(results, create_report = TRUE)  # Access the report if (!is.null(results$report)) {   browseURL(results$report) } } # }"},{"path":"https://biostochastics.github.io/qiprng/reference/withTimeout.html","id":null,"dir":"Reference","previous_headings":"","what":"Timeout helper function — withTimeout","title":"Timeout helper function — withTimeout","text":"Timeout helper function","code":""},{"path":"https://biostochastics.github.io/qiprng/reference/withTimeout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Timeout helper function — withTimeout","text":"","code":"withTimeout(expr, timeout)"},{"path":"https://biostochastics.github.io/qiprng/reference/withTimeout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Timeout helper function — withTimeout","text":"expr Expression evaluate timeout Timeout seconds","code":""}]
